// This file is auto-generated by @hey-api/openapi-ts

/**
 * APIKey
 */
export type ApiKey = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    in: ApiKeyIn;
    /**
     * Name
     */
    name: string;
    [key: string]: unknown | SecuritySchemeType | (string | null) | ApiKeyIn | string | undefined;
};

/**
 * APIKeyIn
 */
export type ApiKeyIn = 'query' | 'header' | 'cookie';

/**
 * AddSessionToEvalSetRequest
 */
export type AddSessionToEvalSetRequest = {
    /**
     * Evalid
     */
    evalId: string;
    /**
     * Sessionid
     */
    sessionId: string;
    /**
     * Userid
     */
    userId: string;
};

/**
 * ApiAuth
 * The generic reusable api auth config.
 *
 * Deprecated. Please use AuthConfig (google/cloud/aiplatform/master/auth.proto)
 * instead.
 */
export type ApiAuth = {
    /**
     * The API secret.
     */
    apiKeyConfig?: ApiAuthApiKeyConfig | null;
};

/**
 * ApiAuthApiKeyConfig
 * The API secret.
 */
export type ApiAuthApiKeyConfig = {
    /**
     * Apikeysecretversion
     * Required. The SecretManager secret version resource name storing API key. e.g. projects/{project}/secrets/{secret}/versions/{version}
     */
    apiKeySecretVersion?: string | null;
    /**
     * Apikeystring
     * The API key string. Either this or `api_key_secret_version` must be set.
     */
    apiKeyString?: string | null;
};

/**
 * ApiKeyConfig
 * Config for authentication with API key.
 */
export type ApiKeyConfig = {
    /**
     * Apikeystring
     * The API key to be used in the request directly.
     */
    apiKeyString?: string | null;
};

/**
 * ApiSpec
 * The API spec that the external API implements.
 */
export type ApiSpec = 'API_SPEC_UNSPECIFIED' | 'SIMPLE_SEARCH' | 'ELASTIC_SEARCH';

/**
 * AuthConfigGoogleServiceAccountConfig
 * Config for Google Service Account Authentication.
 */
export type AuthConfigGoogleServiceAccountConfig = {
    /**
     * Serviceaccount
     * Optional. The service account that the extension execution service runs as. - If the service account is specified, the `iam.serviceAccounts.getAccessToken` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified service account. - If not specified, the Vertex AI Extension Service Agent will be used to execute the Extension.
     */
    serviceAccount?: string | null;
};

/**
 * AuthConfigHttpBasicAuthConfig
 * Config for HTTP Basic Authentication.
 */
export type AuthConfigHttpBasicAuthConfig = {
    /**
     * Credentialsecret
     * Required. The name of the SecretManager secret version resource storing the base64 encoded credentials. Format: `projects/{project}/secrets/{secrete}/versions/{version}` - If specified, the `secretmanager.versions.access` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified resource.
     */
    credentialSecret?: string | null;
};

/**
 * AuthConfigOauthConfig
 * Config for user oauth.
 */
export type AuthConfigOauthConfig = {
    /**
     * Accesstoken
     * Access token for extension endpoint. Only used to propagate token from [[ExecuteExtensionRequest.runtime_auth_config]] at request time.
     */
    accessToken?: string | null;
    /**
     * Serviceaccount
     * The service account used to generate access tokens for executing the Extension. - If the service account is specified, the `iam.serviceAccounts.getAccessToken` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the provided service account.
     */
    serviceAccount?: string | null;
};

/**
 * AuthConfigOidcConfig
 * Config for user OIDC auth.
 */
export type AuthConfigOidcConfig = {
    /**
     * Idtoken
     * OpenID Connect formatted ID token for extension endpoint. Only used to propagate token from [[ExecuteExtensionRequest.runtime_auth_config]] at request time.
     */
    idToken?: string | null;
    /**
     * Serviceaccount
     * The service account used to generate an OpenID Connect (OIDC)-compatible JWT token signed by the Google OIDC Provider (accounts.google.com) for extension endpoint (https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-oidc). - The audience for the token will be set to the URL in the server url defined in the OpenApi spec. - If the service account is provided, the service account should grant `iam.serviceAccounts.getOpenIdToken` permission to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents).
     */
    serviceAccount?: string | null;
};

/**
 * AuthCredential
 * Data class representing an authentication credential.
 *
 * To exchange for the actual credential, please use
 * CredentialExchanger.exchange_credential().
 *
 * Examples: API Key Auth
 * AuthCredential(
 * auth_type=AuthCredentialTypes.API_KEY,
 * api_key="1234",
 * )
 *
 * Example: HTTP Auth
 * AuthCredential(
 * auth_type=AuthCredentialTypes.HTTP,
 * http=HttpAuth(
 * scheme="basic",
 * credentials=HttpCredentials(username="user", password="password"),
 * ),
 * )
 *
 * Example: OAuth2 Bearer Token in HTTP Header
 * AuthCredential(
 * auth_type=AuthCredentialTypes.HTTP,
 * http=HttpAuth(
 * scheme="bearer",
 * credentials=HttpCredentials(token="eyAkaknabna...."),
 * ),
 * )
 *
 * Example: OAuth2 Auth with Authorization Code Flow
 * AuthCredential(
 * auth_type=AuthCredentialTypes.OAUTH2,
 * oauth2=OAuth2Auth(
 * client_id="1234",
 * client_secret="secret",
 * ),
 * )
 *
 * Example: OpenID Connect Auth
 * AuthCredential(
 * auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,
 * oauth2=OAuth2Auth(
 * client_id="1234",
 * client_secret="secret",
 * redirect_uri="https://example.com",
 * scopes=["scope1", "scope2"],
 * ),
 * )
 *
 * Example: Auth with resource reference
 * AuthCredential(
 * auth_type=AuthCredentialTypes.API_KEY,
 * resource_ref="projects/1234/locations/us-central1/resources/resource1",
 * )
 */
export type AuthCredentialInput = {
    authType: AuthCredentialTypes;
    /**
     * Resourceref
     */
    resourceRef?: string | null;
    /**
     * Apikey
     */
    apiKey?: string | null;
    http?: HttpAuth | null;
    serviceAccount?: ServiceAccount | null;
    oauth2?: OAuth2Auth | null;
    [key: string]: unknown | AuthCredentialTypes | (string | null) | (string | null) | (HttpAuth | null) | (ServiceAccount | null) | (OAuth2Auth | null) | undefined;
};

/**
 * AuthCredential
 * Data class representing an authentication credential.
 *
 * To exchange for the actual credential, please use
 * CredentialExchanger.exchange_credential().
 *
 * Examples: API Key Auth
 * AuthCredential(
 * auth_type=AuthCredentialTypes.API_KEY,
 * api_key="1234",
 * )
 *
 * Example: HTTP Auth
 * AuthCredential(
 * auth_type=AuthCredentialTypes.HTTP,
 * http=HttpAuth(
 * scheme="basic",
 * credentials=HttpCredentials(username="user", password="password"),
 * ),
 * )
 *
 * Example: OAuth2 Bearer Token in HTTP Header
 * AuthCredential(
 * auth_type=AuthCredentialTypes.HTTP,
 * http=HttpAuth(
 * scheme="bearer",
 * credentials=HttpCredentials(token="eyAkaknabna...."),
 * ),
 * )
 *
 * Example: OAuth2 Auth with Authorization Code Flow
 * AuthCredential(
 * auth_type=AuthCredentialTypes.OAUTH2,
 * oauth2=OAuth2Auth(
 * client_id="1234",
 * client_secret="secret",
 * ),
 * )
 *
 * Example: OpenID Connect Auth
 * AuthCredential(
 * auth_type=AuthCredentialTypes.OPEN_ID_CONNECT,
 * oauth2=OAuth2Auth(
 * client_id="1234",
 * client_secret="secret",
 * redirect_uri="https://example.com",
 * scopes=["scope1", "scope2"],
 * ),
 * )
 *
 * Example: Auth with resource reference
 * AuthCredential(
 * auth_type=AuthCredentialTypes.API_KEY,
 * resource_ref="projects/1234/locations/us-central1/resources/resource1",
 * )
 */
export type AuthCredentialOutput = {
    authType: AuthCredentialTypes;
    /**
     * Resourceref
     */
    resourceRef?: string | null;
    /**
     * Apikey
     */
    apiKey?: string | null;
    http?: HttpAuth | null;
    serviceAccount?: ServiceAccount | null;
    oauth2?: OAuth2Auth | null;
    [key: string]: unknown | AuthCredentialTypes | (string | null) | (string | null) | (HttpAuth | null) | (ServiceAccount | null) | (OAuth2Auth | null) | undefined;
};

/**
 * AuthCredentialTypes
 * Represents the type of authentication credential.
 */
export type AuthCredentialTypes = 'apiKey' | 'http' | 'oauth2' | 'openIdConnect' | 'serviceAccount';

/**
 * AuthResponse
 * Schema for authentication response
 */
export type AuthResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
    user: UserResponse;
};

/**
 * AuthType
 * Type of auth scheme.
 */
export type AuthType = 'AUTH_TYPE_UNSPECIFIED' | 'NO_AUTH' | 'API_KEY_AUTH' | 'HTTP_BASIC_AUTH' | 'GOOGLE_SERVICE_ACCOUNT_AUTH' | 'OAUTH' | 'OIDC_AUTH';

/**
 * AutomaticFunctionCallingConfig
 * The configuration for automatic function calling.
 */
export type AutomaticFunctionCallingConfig = {
    /**
     * Disable
     * Whether to disable automatic function calling.
     * If not set or set to False, will enable automatic function calling.
     * If set to True, will disable automatic function calling.
     *
     */
    disable?: boolean | null;
    /**
     * Maximumremotecalls
     * If automatic function calling is enabled,
     * maximum number of remote calls for automatic function calling.
     * This number should be a positive integer.
     * If not set, SDK will set maximum number of remote calls to 10.
     *
     */
    maximumRemoteCalls?: number | null;
    /**
     * Ignorecallhistory
     * If automatic function calling is enabled,
     * whether to ignore call history to the response.
     * If not set, SDK will set ignore_call_history to false,
     * and will append the call history to
     * GenerateContentResponse.automatic_function_calling_history.
     *
     */
    ignoreCallHistory?: boolean | null;
};

/**
 * Behavior
 * Defines the function behavior. Defaults to `BLOCKING`.
 */
export type Behavior = 'UNSPECIFIED' | 'BLOCKING' | 'NON_BLOCKING';

/**
 * Blob
 * Content blob.
 */
export type Blob = {
    /**
     * Displayname
     * Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is not currently used in the Gemini GenerateContent calls.
     */
    displayName?: string | null;
    /**
     * Data
     * Required. Raw bytes.
     */
    data?: string | null;
    /**
     * Mimetype
     * Required. The IANA standard MIME type of the source data.
     */
    mimeType?: string | null;
};

/**
 * Body_create_session_apps__app_name__users__user_id__sessions_post
 */
export type BodyCreateSessionAppsAppNameUsersUserIdSessionsPost = {
    /**
     * State
     */
    state?: {
        [key: string]: unknown;
    } | null;
    /**
     * Events
     */
    events?: Array<EventInput> | null;
};

/**
 * Body_upload_file_apps__app_name__users__user_id__sessions__session_id__upload_post
 */
export type BodyUploadFileAppsAppNameUsersUserIdSessionsSessionIdUploadPost = {
    /**
     * File
     */
    file: Blob | File;
    /**
     * Namespace
     */
    namespace?: string;
    /**
     * Custom Filename
     */
    custom_filename?: string | null;
};

/**
 * CodeExecutionResult
 * Result of executing the [ExecutableCode].
 *
 * Only generated when using the [CodeExecution] tool, and always follows a
 * `part` containing the [ExecutableCode].
 */
export type CodeExecutionResult = {
    /**
     * Required. Outcome of the code execution.
     */
    outcome?: Outcome | null;
    /**
     * Output
     * Optional. Contains stdout when code execution is successful, stderr or other description otherwise.
     */
    output?: string | null;
};

/**
 * Content
 * Contains the multi-part content of a message.
 */
export type ContentInput = {
    /**
     * Parts
     * List of parts that constitute a single message. Each part may have
     * a different IANA MIME type.
     */
    parts?: Array<PartInput> | null;
    /**
     * Role
     * Optional. The producer of the content. Must be either 'user' or
     * 'model'. Useful to set for multi-turn conversations, otherwise can be
     * empty. If role is not specified, SDK will determine the role.
     */
    role?: string | null;
};

/**
 * Content
 * Contains the multi-part content of a message.
 */
export type ContentOutput = {
    /**
     * Parts
     * List of parts that constitute a single message. Each part may have
     * a different IANA MIME type.
     */
    parts?: Array<PartOutput> | null;
    /**
     * Role
     * Optional. The producer of the content. Must be either 'user' or
     * 'model'. Useful to set for multi-turn conversations, otherwise can be
     * empty. If role is not specified, SDK will determine the role.
     */
    role?: string | null;
};

/**
 * CreateEvalSetRequest
 */
export type CreateEvalSetRequest = {
    evalSet: EvalSetInput;
};

/**
 * DynamicRetrievalConfig
 * Describes the options to customize dynamic retrieval.
 */
export type DynamicRetrievalConfig = {
    /**
     * The mode of the predictor to be used in dynamic retrieval.
     */
    mode?: DynamicRetrievalConfigMode | null;
    /**
     * Dynamicthreshold
     * Optional. The threshold to be used in dynamic retrieval. If not set, a system default value is used.
     */
    dynamicThreshold?: number | null;
};

/**
 * DynamicRetrievalConfigMode
 * Config for the dynamic retrieval config mode.
 */
export type DynamicRetrievalConfigMode = 'MODE_UNSPECIFIED' | 'MODE_DYNAMIC';

/**
 * EnterpriseWebSearch
 * Tool to search public web data, powered by Vertex AI Search and Sec4 compliance.
 */
export type EnterpriseWebSearch = {
    /**
     * Excludedomains
     * Optional. List of domains to be excluded from the search results. The default limit is 2000 domains.
     */
    excludeDomains?: Array<string> | null;
};

/**
 * Environment
 * The environment being operated.
 */
export type Environment = 'ENVIRONMENT_UNSPECIFIED' | 'ENVIRONMENT_BROWSER';

/**
 * EvalCase
 * An eval case.
 */
export type EvalCaseInput = {
    /**
     * Evalid
     */
    evalId: string;
    /**
     * Conversation
     */
    conversation: Array<InvocationInput>;
    sessionInput?: SessionInput | null;
    /**
     * Creationtimestamp
     */
    creationTimestamp?: number;
};

/**
 * EvalCase
 * An eval case.
 */
export type EvalCaseOutput = {
    /**
     * Evalid
     */
    evalId: string;
    /**
     * Conversation
     */
    conversation: Array<InvocationOutput>;
    sessionInput?: SessionInput | null;
    /**
     * Creationtimestamp
     */
    creationTimestamp?: number;
};

/**
 * EvalCaseResult
 * Case level evaluation results.
 */
export type EvalCaseResult = {
    /**
     * Evalsetfile
     * This field is deprecated, use eval_set_id instead.
     * @deprecated
     */
    evalSetFile?: string | null;
    /**
     * Evalsetid
     */
    evalSetId?: string;
    /**
     * Evalid
     */
    evalId?: string;
    finalEvalStatus: EvalStatus;
    /**
     * Evalmetricresults
     * This field is deprecated, use overall_eval_metric_results instead.
     * @deprecated
     */
    evalMetricResults?: Array<[
        EvalMetricOutput,
        EvalMetricResult
    ]> | null;
    /**
     * Overallevalmetricresults
     */
    overallEvalMetricResults: Array<EvalMetricResult>;
    /**
     * Evalmetricresultperinvocation
     */
    evalMetricResultPerInvocation: Array<EvalMetricResultPerInvocation>;
    /**
     * Sessionid
     */
    sessionId: string;
    sessionDetails?: Session | null;
    /**
     * Userid
     */
    userId?: string | null;
};

/**
 * EvalMetric
 * A metric used to evaluate a particular aspect of an eval case.
 */
export type EvalMetricInput = {
    /**
     * Metricname
     * The name of the metric.
     */
    metricName: string;
    /**
     * Threshold
     * A threshold value. Each metric decides how to interpret this threshold.
     */
    threshold: number;
    /**
     * Options for the judge model.
     */
    judgeModelOptions?: JudgeModelOptionsInput | null;
};

/**
 * EvalMetric
 * A metric used to evaluate a particular aspect of an eval case.
 */
export type EvalMetricOutput = {
    /**
     * Metricname
     * The name of the metric.
     */
    metricName: string;
    /**
     * Threshold
     * A threshold value. Each metric decides how to interpret this threshold.
     */
    threshold: number;
    /**
     * Options for the judge model.
     */
    judgeModelOptions?: JudgeModelOptionsOutput | null;
};

/**
 * EvalMetricResult
 * The actual computed score/value of a particular EvalMetric.
 */
export type EvalMetricResult = {
    /**
     * Metricname
     * The name of the metric.
     */
    metricName: string;
    /**
     * Threshold
     * A threshold value. Each metric decides how to interpret this threshold.
     */
    threshold: number;
    /**
     * Options for the judge model.
     */
    judgeModelOptions?: JudgeModelOptionsOutput | null;
    /**
     * Score
     * Score obtained after evaluating the metric. Optional, as evaluation might not have happened.
     */
    score?: number | null;
    /**
     * The status of this evaluation.
     */
    evalStatus: EvalStatus;
};

/**
 * EvalMetricResultPerInvocation
 * Eval metric results per invocation.
 */
export type EvalMetricResultPerInvocation = {
    /**
     * The actual invocation, usually obtained by inferencing the agent.
     */
    actualInvocation: InvocationOutput;
    /**
     * The expected invocation, usually the reference or golden invocation.
     */
    expectedInvocation: InvocationOutput;
    /**
     * Evalmetricresults
     * Eval resutls for each applicable metric.
     */
    evalMetricResults?: Array<EvalMetricResult>;
};

/**
 * EvalResult
 * This class has no field intentionally.
 *
 * The goal here is to just give a new name to the class to align with the API
 * endpoint.
 */
export type EvalResult = {
    /**
     * Evalsetresultid
     */
    evalSetResultId: string;
    /**
     * Evalsetresultname
     */
    evalSetResultName?: string | null;
    /**
     * Evalsetid
     */
    evalSetId: string;
    /**
     * Evalcaseresults
     */
    evalCaseResults?: Array<EvalCaseResult>;
    /**
     * Creationtimestamp
     */
    creationTimestamp?: number;
};

/**
 * EvalSet
 * A set of eval cases.
 */
export type EvalSetInput = {
    /**
     * Eval Set Id
     */
    eval_set_id: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Eval Cases
     */
    eval_cases: Array<EvalCaseInput>;
    /**
     * Creation Timestamp
     */
    creation_timestamp?: number;
};

/**
 * EvalSet
 * A set of eval cases.
 */
export type EvalSetOutput = {
    /**
     * Eval Set Id
     */
    eval_set_id: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Eval Cases
     */
    eval_cases: Array<EvalCaseOutput>;
    /**
     * Creation Timestamp
     */
    creation_timestamp?: number;
};

/**
 * EvalSetResult
 * Eval set level evaluation results.
 */
export type EvalSetResult = {
    /**
     * Evalsetresultid
     */
    evalSetResultId: string;
    /**
     * Evalsetresultname
     */
    evalSetResultName?: string | null;
    /**
     * Evalsetid
     */
    evalSetId: string;
    /**
     * Evalcaseresults
     */
    evalCaseResults?: Array<EvalCaseResult>;
    /**
     * Creationtimestamp
     */
    creationTimestamp?: number;
};

/**
 * EvalStatus
 */
export type EvalStatus = 1 | 2 | 3;

/**
 * Event
 * Represents an event in a conversation between agents and users.
 *
 * It is used to store the content of the conversation, as well as the actions
 * taken by the agents like function calls, etc.
 *
 * Attributes:
 * invocation_id: Required. The invocation ID of the event. Should be non-empty
 * before appending to a session.
 * author: Required. "user" or the name of the agent, indicating who appended
 * the event to the session.
 * actions: The actions taken by the agent.
 * long_running_tool_ids: The ids of the long running function calls.
 * branch: The branch of the event.
 * id: The unique identifier of the event.
 * timestamp: The timestamp of the event.
 * get_function_calls: Returns the function calls in the event.
 */
export type EventInput = {
    content?: ContentInput | null;
    groundingMetadata?: GroundingMetadataInput | null;
    /**
     * Partial
     */
    partial?: boolean | null;
    /**
     * Turncomplete
     */
    turnComplete?: boolean | null;
    finishReason?: FinishReason | null;
    /**
     * Errorcode
     */
    errorCode?: string | null;
    /**
     * Errormessage
     */
    errorMessage?: string | null;
    /**
     * Interrupted
     */
    interrupted?: boolean | null;
    /**
     * Custommetadata
     */
    customMetadata?: {
        [key: string]: unknown;
    } | null;
    usageMetadata?: GenerateContentResponseUsageMetadataInput | null;
    liveSessionResumptionUpdate?: LiveServerSessionResumptionUpdate | null;
    inputTranscription?: Transcription | null;
    outputTranscription?: Transcription | null;
    /**
     * Invocationid
     */
    invocationId?: string;
    /**
     * Author
     */
    author: string;
    actions?: EventActionsInput;
    /**
     * Longrunningtoolids
     */
    longRunningToolIds?: Array<string> | null;
    /**
     * Branch
     */
    branch?: string | null;
    /**
     * Id
     */
    id?: string;
    /**
     * Timestamp
     */
    timestamp?: number;
};

/**
 * Event
 * Represents an event in a conversation between agents and users.
 *
 * It is used to store the content of the conversation, as well as the actions
 * taken by the agents like function calls, etc.
 *
 * Attributes:
 * invocation_id: Required. The invocation ID of the event. Should be non-empty
 * before appending to a session.
 * author: Required. "user" or the name of the agent, indicating who appended
 * the event to the session.
 * actions: The actions taken by the agent.
 * long_running_tool_ids: The ids of the long running function calls.
 * branch: The branch of the event.
 * id: The unique identifier of the event.
 * timestamp: The timestamp of the event.
 * get_function_calls: Returns the function calls in the event.
 */
export type EventOutput = {
    content?: ContentOutput | null;
    groundingMetadata?: GroundingMetadataOutput | null;
    /**
     * Partial
     */
    partial?: boolean | null;
    /**
     * Turncomplete
     */
    turnComplete?: boolean | null;
    finishReason?: FinishReason | null;
    /**
     * Errorcode
     */
    errorCode?: string | null;
    /**
     * Errormessage
     */
    errorMessage?: string | null;
    /**
     * Interrupted
     */
    interrupted?: boolean | null;
    /**
     * Custommetadata
     */
    customMetadata?: {
        [key: string]: unknown;
    } | null;
    usageMetadata?: GenerateContentResponseUsageMetadataOutput | null;
    liveSessionResumptionUpdate?: LiveServerSessionResumptionUpdate | null;
    inputTranscription?: Transcription | null;
    outputTranscription?: Transcription | null;
    /**
     * Invocationid
     */
    invocationId?: string;
    /**
     * Author
     */
    author: string;
    actions?: EventActionsOutput;
    /**
     * Longrunningtoolids
     */
    longRunningToolIds?: Array<string> | null;
    /**
     * Branch
     */
    branch?: string | null;
    /**
     * Id
     */
    id?: string;
    /**
     * Timestamp
     */
    timestamp?: number;
};

/**
 * EventActions
 * Represents the actions attached to an event.
 */
export type EventActionsInput = {
    /**
     * Skipsummarization
     */
    skipSummarization?: boolean | null;
    /**
     * Statedelta
     */
    stateDelta?: {
        [key: string]: unknown;
    };
    /**
     * Artifactdelta
     */
    artifactDelta?: {
        [key: string]: number;
    };
    /**
     * Transfertoagent
     */
    transferToAgent?: string | null;
    /**
     * Escalate
     */
    escalate?: boolean | null;
    /**
     * Requestedauthconfigs
     */
    requestedAuthConfigs?: {
        [key: string]: GoogleAdkAuthAuthToolAuthConfigInput;
    };
};

/**
 * EventActions
 * Represents the actions attached to an event.
 */
export type EventActionsOutput = {
    /**
     * Skipsummarization
     */
    skipSummarization?: boolean | null;
    /**
     * Statedelta
     */
    stateDelta?: {
        [key: string]: unknown;
    };
    /**
     * Artifactdelta
     */
    artifactDelta?: {
        [key: string]: number;
    };
    /**
     * Transfertoagent
     */
    transferToAgent?: string | null;
    /**
     * Escalate
     */
    escalate?: boolean | null;
    /**
     * Requestedauthconfigs
     */
    requestedAuthConfigs?: {
        [key: string]: GoogleAdkAuthAuthToolAuthConfigOutput;
    };
};

/**
 * ExecutableCode
 * Code generated by the model that is meant to be executed, and the result returned to the model.
 *
 * Generated when using the [CodeExecution] tool, in which the code will be
 * automatically executed, and a corresponding [CodeExecutionResult] will also be
 * generated.
 */
export type ExecutableCode = {
    /**
     * Code
     * Required. The code to be executed.
     */
    code?: string | null;
    /**
     * Required. Programming language of the `code`.
     */
    language?: Language | null;
};

/**
 * ExternalApi
 * Retrieve from data source powered by external API for grounding.
 *
 * The external API is not owned by Google, but need to follow the pre-defined
 * API spec.
 */
export type ExternalApiInput = {
    /**
     * The authentication config to access the API. Deprecated. Please use auth_config instead.
     */
    apiAuth?: ApiAuth | null;
    /**
     * The API spec that the external API implements.
     */
    apiSpec?: ApiSpec | null;
    /**
     * The authentication config to access the API.
     */
    authConfig?: GoogleGenaiTypesAuthConfig | null;
    /**
     * Parameters for the elastic search API.
     */
    elasticSearchParams?: ExternalApiElasticSearchParams | null;
    /**
     * Endpoint
     * The endpoint of the external API. The system will call the API at this endpoint to retrieve the data for grounding. Example: https://acme.com:443/search
     */
    endpoint?: string | null;
    /**
     * Parameters for the simple search API.
     */
    simpleSearchParams?: ExternalApiSimpleSearchParams | null;
};

/**
 * ExternalApi
 * Retrieve from data source powered by external API for grounding.
 *
 * The external API is not owned by Google, but need to follow the pre-defined
 * API spec.
 */
export type ExternalApiOutput = {
    /**
     * The authentication config to access the API. Deprecated. Please use auth_config instead.
     */
    apiAuth?: ApiAuth | null;
    /**
     * The API spec that the external API implements.
     */
    apiSpec?: ApiSpec | null;
    /**
     * The authentication config to access the API.
     */
    authConfig?: GoogleGenaiTypesAuthConfig | null;
    /**
     * Parameters for the elastic search API.
     */
    elasticSearchParams?: ExternalApiElasticSearchParams | null;
    /**
     * Endpoint
     * The endpoint of the external API. The system will call the API at this endpoint to retrieve the data for grounding. Example: https://acme.com:443/search
     */
    endpoint?: string | null;
    /**
     * Parameters for the simple search API.
     */
    simpleSearchParams?: ExternalApiSimpleSearchParams | null;
};

/**
 * ExternalApiElasticSearchParams
 * The search parameters to use for the ELASTIC_SEARCH spec.
 */
export type ExternalApiElasticSearchParams = {
    /**
     * Index
     * The ElasticSearch index to use.
     */
    index?: string | null;
    /**
     * Numhits
     * Optional. Number of hits (chunks) to request. When specified, it is passed to Elasticsearch as the `num_hits` param.
     */
    numHits?: number | null;
    /**
     * Searchtemplate
     * The ElasticSearch search template to use.
     */
    searchTemplate?: string | null;
};

/**
 * ExternalApiSimpleSearchParams
 * The search parameters to use for SIMPLE_SEARCH spec.
 */
export type ExternalApiSimpleSearchParams = {
    [key: string]: never;
};

/**
 * FeatureSelectionPreference
 * Options for feature selection preference.
 */
export type FeatureSelectionPreference = 'FEATURE_SELECTION_PREFERENCE_UNSPECIFIED' | 'PRIORITIZE_QUALITY' | 'BALANCED' | 'PRIORITIZE_COST';

/**
 * File
 * A file uploaded to the API.
 */
export type File = {
    /**
     * Name
     * The `File` resource name. The ID (name excluding the "files/" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a unique name will be generated. Example: `files/123-456`
     */
    name?: string | null;
    /**
     * Displayname
     * Optional. The human-readable display name for the `File`. The display name must be no more than 512 characters in length, including spaces. Example: 'Welcome Image'
     */
    displayName?: string | null;
    /**
     * Mimetype
     * Output only. MIME type of the file.
     */
    mimeType?: string | null;
    /**
     * Sizebytes
     * Output only. Size of the file in bytes.
     */
    sizeBytes?: number | null;
    /**
     * Createtime
     * Output only. The timestamp of when the `File` was created.
     */
    createTime?: string | null;
    /**
     * Expirationtime
     * Output only. The timestamp of when the `File` will be deleted. Only set if the `File` is scheduled to expire.
     */
    expirationTime?: string | null;
    /**
     * Updatetime
     * Output only. The timestamp of when the `File` was last updated.
     */
    updateTime?: string | null;
    /**
     * Sha256Hash
     * Output only. SHA-256 hash of the uploaded bytes. The hash value is encoded in base64 format.
     */
    sha256Hash?: string | null;
    /**
     * Uri
     * Output only. The URI of the `File`.
     */
    uri?: string | null;
    /**
     * Downloaduri
     * Output only. The URI of the `File`, only set for downloadable (generated) files.
     */
    downloadUri?: string | null;
    /**
     * Output only. Processing state of the File.
     */
    state?: FileState | null;
    /**
     * Output only. The source of the `File`.
     */
    source?: FileSource | null;
    /**
     * Videometadata
     * Output only. Metadata for a video.
     */
    videoMetadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Output only. Error status if File processing failed.
     */
    error?: FileStatus | null;
};

/**
 * FileData
 * URI based data.
 */
export type FileData = {
    /**
     * Displayname
     * Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. It is not currently used in the Gemini GenerateContent calls.
     */
    displayName?: string | null;
    /**
     * Fileuri
     * Required. URI.
     */
    fileUri?: string | null;
    /**
     * Mimetype
     * Required. The IANA standard MIME type of the source data.
     */
    mimeType?: string | null;
};

/**
 * FileSource
 * Source of the File.
 */
export type FileSource = 'SOURCE_UNSPECIFIED' | 'UPLOADED' | 'GENERATED';

/**
 * FileState
 * State for the lifecycle of a File.
 */
export type FileState = 'STATE_UNSPECIFIED' | 'PROCESSING' | 'ACTIVE' | 'FAILED';

/**
 * FileStatus
 * Status of a File that uses a common error model.
 */
export type FileStatus = {
    /**
     * Details
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Message
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    message?: string | null;
    /**
     * Code
     * The status code. 0 for OK, 1 for CANCELLED
     */
    code?: number | null;
};

/**
 * FinishReason
 * Output only. The reason why the model stopped generating tokens.
 *
 * If empty, the model has not stopped generating the tokens.
 */
export type FinishReason = 'FINISH_REASON_UNSPECIFIED' | 'STOP' | 'MAX_TOKENS' | 'SAFETY' | 'RECITATION' | 'LANGUAGE' | 'OTHER' | 'BLOCKLIST' | 'PROHIBITED_CONTENT' | 'SPII' | 'MALFORMED_FUNCTION_CALL' | 'IMAGE_SAFETY' | 'UNEXPECTED_TOOL_CALL';

/**
 * FunctionCall
 * A function call.
 */
export type FunctionCall = {
    /**
     * Id
     * The unique id of the function call. If populated, the client to execute the
     * `function_call` and return the response with the matching `id`.
     */
    id?: string | null;
    /**
     * Args
     * Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.
     */
    args?: {
        [key: string]: unknown;
    } | null;
    /**
     * Name
     * Required. The name of the function to call. Matches [FunctionDeclaration.name].
     */
    name?: string | null;
};

/**
 * FunctionCallingConfig
 * Function calling config.
 */
export type FunctionCallingConfig = {
    /**
     * Optional. Function calling mode.
     */
    mode?: FunctionCallingConfigMode | null;
    /**
     * Allowedfunctionnames
     * Optional. Function names to call. Only set when the Mode is ANY. Function names should match [FunctionDeclaration.name]. With mode set to ANY, model will predict a function call from the set of function names provided.
     */
    allowedFunctionNames?: Array<string> | null;
};

/**
 * FunctionCallingConfigMode
 * Config for the function calling config mode.
 */
export type FunctionCallingConfigMode = 'MODE_UNSPECIFIED' | 'AUTO' | 'ANY' | 'NONE' | 'VALIDATED';

/**
 * FunctionDeclaration
 * Defines a function that the model can generate JSON inputs for.
 *
 * The inputs are based on `OpenAPI 3.0 specifications
 * <https://spec.openapis.org/oas/v3.0.3>`_.
 */
export type FunctionDeclarationInput = {
    /**
     * Defines the function behavior.
     */
    behavior?: Behavior | null;
    /**
     * Description
     * Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function.
     */
    description?: string | null;
    /**
     * Name
     * Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64.
     */
    name?: string | null;
    /**
     * Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1
     */
    parameters?: SchemaInput | null;
    /**
     * Parametersjsonschema
     * Optional. Describes the parameters to the function in JSON Schema format. The schema must describe an object where the properties are the parameters to the function. For example: ``` { "type": "object", "properties": { "name": { "type": "string" }, "age": { "type": "integer" } }, "additionalProperties": false, "required": ["name", "age"], "propertyOrdering": ["name", "age"] } ``` This field is mutually exclusive with `parameters`.
     */
    parametersJsonSchema?: unknown | null;
    /**
     * Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function.
     */
    response?: SchemaInput | null;
    /**
     * Responsejsonschema
     * Optional. Describes the output from this function in JSON Schema format. The value specified by the schema is the response value of the function. This field is mutually exclusive with `response`.
     */
    responseJsonSchema?: unknown | null;
};

/**
 * FunctionDeclaration
 * Defines a function that the model can generate JSON inputs for.
 *
 * The inputs are based on `OpenAPI 3.0 specifications
 * <https://spec.openapis.org/oas/v3.0.3>`_.
 */
export type FunctionDeclarationOutput = {
    /**
     * Defines the function behavior.
     */
    behavior?: Behavior | null;
    /**
     * Description
     * Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function.
     */
    description?: string | null;
    /**
     * Name
     * Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64.
     */
    name?: string | null;
    /**
     * Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1
     */
    parameters?: SchemaOutput | null;
    /**
     * Parametersjsonschema
     * Optional. Describes the parameters to the function in JSON Schema format. The schema must describe an object where the properties are the parameters to the function. For example: ``` { "type": "object", "properties": { "name": { "type": "string" }, "age": { "type": "integer" } }, "additionalProperties": false, "required": ["name", "age"], "propertyOrdering": ["name", "age"] } ``` This field is mutually exclusive with `parameters`.
     */
    parametersJsonSchema?: unknown | null;
    /**
     * Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function.
     */
    response?: SchemaOutput | null;
    /**
     * Responsejsonschema
     * Optional. Describes the output from this function in JSON Schema format. The value specified by the schema is the response value of the function. This field is mutually exclusive with `response`.
     */
    responseJsonSchema?: unknown | null;
};

/**
 * FunctionResponse
 * A function response.
 */
export type FunctionResponse = {
    /**
     * Willcontinue
     * Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls (see FunctionDeclaration.behavior for details), ignored otherwise. If false, the default, future responses will not be considered. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished.
     */
    willContinue?: boolean | null;
    /**
     * Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE.
     */
    scheduling?: FunctionResponseScheduling | null;
    /**
     * Id
     * Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.
     */
    id?: string | null;
    /**
     * Name
     * Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].
     */
    name?: string | null;
    /**
     * Response
     * Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output.
     */
    response?: {
        [key: string]: unknown;
    } | null;
};

/**
 * FunctionResponseScheduling
 * Specifies how the response should be scheduled in the conversation.
 */
export type FunctionResponseScheduling = 'SCHEDULING_UNSPECIFIED' | 'SILENT' | 'WHEN_IDLE' | 'INTERRUPT';

/**
 * GenerateContentConfig
 * Optional model configuration parameters.
 *
 * For more information, see `Content generation parameters
 * <https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/content-generation-parameters>`_.
 */
export type GenerateContentConfigInput = {
    /**
     * Used to override HTTP request options.
     */
    httpOptions?: HttpOptions | null;
    /**
     * Systeminstruction
     * Instructions for the model to steer it toward better performance.
     * For example, "Answer as concisely as possible" or "Don't use technical
     * terms in your response".
     *
     */
    systemInstruction?: ContentInput | string | File | PartInput | Array<string | File | PartInput> | null;
    /**
     * Temperature
     * Value that controls the degree of randomness in token selection.
     * Lower temperatures are good for prompts that require a less open-ended or
     * creative response, while higher temperatures can lead to more diverse or
     * creative results.
     *
     */
    temperature?: number | null;
    /**
     * Topp
     * Tokens are selected from the most to least probable until the sum
     * of their probabilities equals this value. Use a lower value for less
     * random responses and a higher value for more random responses.
     *
     */
    topP?: number | null;
    /**
     * Topk
     * For each token selection step, the ``top_k`` tokens with the
     * highest probabilities are sampled. Then tokens are further filtered based
     * on ``top_p`` with the final token selected using temperature sampling. Use
     * a lower number for less random responses and a higher number for more
     * random responses.
     *
     */
    topK?: number | null;
    /**
     * Candidatecount
     * Number of response variations to return.
     *
     */
    candidateCount?: number | null;
    /**
     * Maxoutputtokens
     * Maximum number of tokens that can be generated in the response.
     *
     */
    maxOutputTokens?: number | null;
    /**
     * Stopsequences
     * List of strings that tells the model to stop generating text if one
     * of the strings is encountered in the response.
     *
     */
    stopSequences?: Array<string> | null;
    /**
     * Responselogprobs
     * Whether to return the log probabilities of the tokens that were
     * chosen by the model at each step.
     *
     */
    responseLogprobs?: boolean | null;
    /**
     * Logprobs
     * Number of top candidate tokens to return the log probabilities for
     * at each generation step.
     *
     */
    logprobs?: number | null;
    /**
     * Presencepenalty
     * Positive values penalize tokens that already appear in the
     * generated text, increasing the probability of generating more diverse
     * content.
     *
     */
    presencePenalty?: number | null;
    /**
     * Frequencypenalty
     * Positive values penalize tokens that repeatedly appear in the
     * generated text, increasing the probability of generating more diverse
     * content.
     *
     */
    frequencyPenalty?: number | null;
    /**
     * Seed
     * When ``seed`` is fixed to a specific number, the model makes a best
     * effort to provide the same response for repeated requests. By default, a
     * random number is used.
     *
     */
    seed?: number | null;
    /**
     * Responsemimetype
     * Output response mimetype of the generated candidate text.
     * Supported mimetype:
     * - `text/plain`: (default) Text output.
     * - `application/json`: JSON response in the candidates.
     * The model needs to be prompted to output the appropriate response type,
     * otherwise the behavior is undefined.
     * This is a preview feature.
     *
     */
    responseMimeType?: string | null;
    /**
     * Responseschema
     * The `Schema` object allows the definition of input and output data types.
     * These types can be objects, but also primitives and arrays.
     * Represents a select subset of an [OpenAPI 3.0 schema
     * object](https://spec.openapis.org/oas/v3.0.3#schema).
     * If set, a compatible response_mime_type must also be set.
     * Compatible mimetypes: `application/json`: Schema for JSON response.
     *
     */
    responseSchema?: {
        [key: string]: unknown;
    } | SchemaInput | null;
    /**
     * Responsejsonschema
     * Optional. Output schema of the generated response.
     * This is an alternative to `response_schema` that accepts [JSON
     * Schema](https://json-schema.org/). If set, `response_schema` must be
     * omitted, but `response_mime_type` is required. While the full JSON Schema
     * may be sent, not all features are supported. Specifically, only the
     * following properties are supported: - `$id` - `$defs` - `$ref` - `$anchor`
     * - `type` - `format` - `title` - `description` - `enum` (for strings and
     * numbers) - `items` - `prefixItems` - `minItems` - `maxItems` - `minimum` -
     * `maximum` - `anyOf` - `oneOf` (interpreted the same as `anyOf`) -
     * `properties` - `additionalProperties` - `required` The non-standard
     * `propertyOrdering` property may also be set. Cyclic references are
     * unrolled to a limited degree and, as such, may only be used within
     * non-required properties. (Nullable properties are not sufficient.) If
     * `$ref` is set on a sub-schema, no other properties, except for than those
     * starting as a `$`, may be set.
     */
    responseJsonSchema?: unknown | null;
    /**
     * Configuration for model router requests.
     *
     */
    routingConfig?: GenerationConfigRoutingConfig | null;
    /**
     * Configuration for model selection.
     *
     */
    modelSelectionConfig?: ModelSelectionConfig | null;
    /**
     * Safetysettings
     * Safety settings in the request to block unsafe content in the
     * response.
     *
     */
    safetySettings?: Array<SafetySetting> | null;
    /**
     * Tools
     * Code that enables the system to interact with external systems to
     * perform an action outside of the knowledge and scope of the model.
     *
     */
    tools?: Array<GoogleGenaiTypesToolInput | McpTypesTool> | null;
    /**
     * Associates model output to a specific function call.
     *
     */
    toolConfig?: ToolConfigInput | null;
    /**
     * Labels
     * Labels with user-defined metadata to break down billed charges.
     */
    labels?: {
        [key: string]: string;
    } | null;
    /**
     * Cachedcontent
     * Resource name of a context cache that can be used in subsequent
     * requests.
     *
     */
    cachedContent?: string | null;
    /**
     * Responsemodalities
     * The requested modalities of the response. Represents the set of
     * modalities that the model can return.
     *
     */
    responseModalities?: Array<string> | null;
    /**
     * If specified, the media resolution specified will be used.
     *
     */
    mediaResolution?: MediaResolution | null;
    /**
     * Speechconfig
     * The speech generation configuration.
     *
     */
    speechConfig?: string | SpeechConfigInput | null;
    /**
     * Audiotimestamp
     * If enabled, audio timestamp will be included in the request to the
     * model.
     *
     */
    audioTimestamp?: boolean | null;
    /**
     * The configuration for automatic function calling.
     *
     */
    automaticFunctionCalling?: AutomaticFunctionCallingConfig | null;
    /**
     * The thinking features configuration.
     *
     */
    thinkingConfig?: ThinkingConfig | null;
};

/**
 * GenerateContentConfig
 * Optional model configuration parameters.
 *
 * For more information, see `Content generation parameters
 * <https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/content-generation-parameters>`_.
 */
export type GenerateContentConfigOutput = {
    /**
     * Used to override HTTP request options.
     */
    httpOptions?: HttpOptions | null;
    /**
     * Systeminstruction
     * Instructions for the model to steer it toward better performance.
     * For example, "Answer as concisely as possible" or "Don't use technical
     * terms in your response".
     *
     */
    systemInstruction?: ContentOutput | string | File | PartOutput | Array<string | File | PartOutput> | null;
    /**
     * Temperature
     * Value that controls the degree of randomness in token selection.
     * Lower temperatures are good for prompts that require a less open-ended or
     * creative response, while higher temperatures can lead to more diverse or
     * creative results.
     *
     */
    temperature?: number | null;
    /**
     * Topp
     * Tokens are selected from the most to least probable until the sum
     * of their probabilities equals this value. Use a lower value for less
     * random responses and a higher value for more random responses.
     *
     */
    topP?: number | null;
    /**
     * Topk
     * For each token selection step, the ``top_k`` tokens with the
     * highest probabilities are sampled. Then tokens are further filtered based
     * on ``top_p`` with the final token selected using temperature sampling. Use
     * a lower number for less random responses and a higher number for more
     * random responses.
     *
     */
    topK?: number | null;
    /**
     * Candidatecount
     * Number of response variations to return.
     *
     */
    candidateCount?: number | null;
    /**
     * Maxoutputtokens
     * Maximum number of tokens that can be generated in the response.
     *
     */
    maxOutputTokens?: number | null;
    /**
     * Stopsequences
     * List of strings that tells the model to stop generating text if one
     * of the strings is encountered in the response.
     *
     */
    stopSequences?: Array<string> | null;
    /**
     * Responselogprobs
     * Whether to return the log probabilities of the tokens that were
     * chosen by the model at each step.
     *
     */
    responseLogprobs?: boolean | null;
    /**
     * Logprobs
     * Number of top candidate tokens to return the log probabilities for
     * at each generation step.
     *
     */
    logprobs?: number | null;
    /**
     * Presencepenalty
     * Positive values penalize tokens that already appear in the
     * generated text, increasing the probability of generating more diverse
     * content.
     *
     */
    presencePenalty?: number | null;
    /**
     * Frequencypenalty
     * Positive values penalize tokens that repeatedly appear in the
     * generated text, increasing the probability of generating more diverse
     * content.
     *
     */
    frequencyPenalty?: number | null;
    /**
     * Seed
     * When ``seed`` is fixed to a specific number, the model makes a best
     * effort to provide the same response for repeated requests. By default, a
     * random number is used.
     *
     */
    seed?: number | null;
    /**
     * Responsemimetype
     * Output response mimetype of the generated candidate text.
     * Supported mimetype:
     * - `text/plain`: (default) Text output.
     * - `application/json`: JSON response in the candidates.
     * The model needs to be prompted to output the appropriate response type,
     * otherwise the behavior is undefined.
     * This is a preview feature.
     *
     */
    responseMimeType?: string | null;
    /**
     * Responseschema
     * The `Schema` object allows the definition of input and output data types.
     * These types can be objects, but also primitives and arrays.
     * Represents a select subset of an [OpenAPI 3.0 schema
     * object](https://spec.openapis.org/oas/v3.0.3#schema).
     * If set, a compatible response_mime_type must also be set.
     * Compatible mimetypes: `application/json`: Schema for JSON response.
     *
     */
    responseSchema?: {
        [key: string]: unknown;
    } | SchemaOutput | null;
    /**
     * Responsejsonschema
     * Optional. Output schema of the generated response.
     * This is an alternative to `response_schema` that accepts [JSON
     * Schema](https://json-schema.org/). If set, `response_schema` must be
     * omitted, but `response_mime_type` is required. While the full JSON Schema
     * may be sent, not all features are supported. Specifically, only the
     * following properties are supported: - `$id` - `$defs` - `$ref` - `$anchor`
     * - `type` - `format` - `title` - `description` - `enum` (for strings and
     * numbers) - `items` - `prefixItems` - `minItems` - `maxItems` - `minimum` -
     * `maximum` - `anyOf` - `oneOf` (interpreted the same as `anyOf`) -
     * `properties` - `additionalProperties` - `required` The non-standard
     * `propertyOrdering` property may also be set. Cyclic references are
     * unrolled to a limited degree and, as such, may only be used within
     * non-required properties. (Nullable properties are not sufficient.) If
     * `$ref` is set on a sub-schema, no other properties, except for than those
     * starting as a `$`, may be set.
     */
    responseJsonSchema?: unknown | null;
    /**
     * Configuration for model router requests.
     *
     */
    routingConfig?: GenerationConfigRoutingConfig | null;
    /**
     * Configuration for model selection.
     *
     */
    modelSelectionConfig?: ModelSelectionConfig | null;
    /**
     * Safetysettings
     * Safety settings in the request to block unsafe content in the
     * response.
     *
     */
    safetySettings?: Array<SafetySetting> | null;
    /**
     * Tools
     * Code that enables the system to interact with external systems to
     * perform an action outside of the knowledge and scope of the model.
     *
     */
    tools?: Array<GoogleGenaiTypesToolOutput | McpTypesTool> | null;
    /**
     * Associates model output to a specific function call.
     *
     */
    toolConfig?: ToolConfigOutput | null;
    /**
     * Labels
     * Labels with user-defined metadata to break down billed charges.
     */
    labels?: {
        [key: string]: string;
    } | null;
    /**
     * Cachedcontent
     * Resource name of a context cache that can be used in subsequent
     * requests.
     *
     */
    cachedContent?: string | null;
    /**
     * Responsemodalities
     * The requested modalities of the response. Represents the set of
     * modalities that the model can return.
     *
     */
    responseModalities?: Array<string> | null;
    /**
     * If specified, the media resolution specified will be used.
     *
     */
    mediaResolution?: MediaResolution | null;
    /**
     * Speechconfig
     * The speech generation configuration.
     *
     */
    speechConfig?: string | SpeechConfigOutput | null;
    /**
     * Audiotimestamp
     * If enabled, audio timestamp will be included in the request to the
     * model.
     *
     */
    audioTimestamp?: boolean | null;
    /**
     * The configuration for automatic function calling.
     *
     */
    automaticFunctionCalling?: AutomaticFunctionCallingConfig | null;
    /**
     * The thinking features configuration.
     *
     */
    thinkingConfig?: ThinkingConfig | null;
};

/**
 * GenerateContentResponseUsageMetadata
 * Usage metadata about response(s).
 */
export type GenerateContentResponseUsageMetadataInput = {
    /**
     * Cachetokensdetails
     * Output only. List of modalities of the cached content in the request input.
     */
    cacheTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Cachedcontenttokencount
     * Output only. Number of tokens in the cached part in the input (the cached content).
     */
    cachedContentTokenCount?: number | null;
    /**
     * Candidatestokencount
     * Number of tokens in the response(s).
     */
    candidatesTokenCount?: number | null;
    /**
     * Candidatestokensdetails
     * Output only. List of modalities that were returned in the response.
     */
    candidatesTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Prompttokencount
     * Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content.
     */
    promptTokenCount?: number | null;
    /**
     * Prompttokensdetails
     * Output only. List of modalities that were processed in the request input.
     */
    promptTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Thoughtstokencount
     * Output only. Number of tokens present in thoughts output.
     */
    thoughtsTokenCount?: number | null;
    /**
     * Tooluseprompttokencount
     * Output only. Number of tokens present in tool-use prompt(s).
     */
    toolUsePromptTokenCount?: number | null;
    /**
     * Tooluseprompttokensdetails
     * Output only. List of modalities that were processed for tool-use request inputs.
     */
    toolUsePromptTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Totaltokencount
     * Total token count for prompt, response candidates, and tool-use prompts (if present).
     */
    totalTokenCount?: number | null;
    /**
     * Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota.
     */
    trafficType?: TrafficType | null;
};

/**
 * GenerateContentResponseUsageMetadata
 * Usage metadata about response(s).
 */
export type GenerateContentResponseUsageMetadataOutput = {
    /**
     * Cachetokensdetails
     * Output only. List of modalities of the cached content in the request input.
     */
    cacheTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Cachedcontenttokencount
     * Output only. Number of tokens in the cached part in the input (the cached content).
     */
    cachedContentTokenCount?: number | null;
    /**
     * Candidatestokencount
     * Number of tokens in the response(s).
     */
    candidatesTokenCount?: number | null;
    /**
     * Candidatestokensdetails
     * Output only. List of modalities that were returned in the response.
     */
    candidatesTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Prompttokencount
     * Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content.
     */
    promptTokenCount?: number | null;
    /**
     * Prompttokensdetails
     * Output only. List of modalities that were processed in the request input.
     */
    promptTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Thoughtstokencount
     * Output only. Number of tokens present in thoughts output.
     */
    thoughtsTokenCount?: number | null;
    /**
     * Tooluseprompttokencount
     * Output only. Number of tokens present in tool-use prompt(s).
     */
    toolUsePromptTokenCount?: number | null;
    /**
     * Tooluseprompttokensdetails
     * Output only. List of modalities that were processed for tool-use request inputs.
     */
    toolUsePromptTokensDetails?: Array<ModalityTokenCount> | null;
    /**
     * Totaltokencount
     * Total token count for prompt, response candidates, and tool-use prompts (if present).
     */
    totalTokenCount?: number | null;
    /**
     * Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota.
     */
    trafficType?: TrafficType | null;
};

/**
 * GenerationConfigRoutingConfig
 * The configuration for routing the request to a specific model.
 */
export type GenerationConfigRoutingConfig = {
    /**
     * Automated routing.
     */
    autoMode?: GenerationConfigRoutingConfigAutoRoutingMode | null;
    /**
     * Manual routing.
     */
    manualMode?: GenerationConfigRoutingConfigManualRoutingMode | null;
};

/**
 * GenerationConfigRoutingConfigAutoRoutingMode
 * When automated routing is specified, the routing will be determined by the pretrained routing model and customer provided model routing preference.
 */
export type GenerationConfigRoutingConfigAutoRoutingMode = {
    /**
     * Modelroutingpreference
     * The model routing preference.
     */
    modelRoutingPreference?: ('UNKNOWN' | 'PRIORITIZE_QUALITY' | 'BALANCED' | 'PRIORITIZE_COST') | null;
};

/**
 * GenerationConfigRoutingConfigManualRoutingMode
 * When manual routing is set, the specified model will be used directly.
 */
export type GenerationConfigRoutingConfigManualRoutingMode = {
    /**
     * Modelname
     * The model name to use. Only the public LLM models are accepted. See [Supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference#supported-models).
     */
    modelName?: string | null;
};

/**
 * GoogleMaps
 * Tool to support Google Maps in Model.
 */
export type GoogleMapsInput = {
    /**
     * Optional. Auth config for the Google Maps tool.
     */
    authConfig?: GoogleGenaiTypesAuthConfig | null;
};

/**
 * GoogleMaps
 * Tool to support Google Maps in Model.
 */
export type GoogleMapsOutput = {
    /**
     * Optional. Auth config for the Google Maps tool.
     */
    authConfig?: GoogleGenaiTypesAuthConfig | null;
};

/**
 * GoogleSearch
 * Tool to support Google Search in Model. Powered by Google.
 */
export type GoogleSearchInput = {
    /**
     * Optional. Filter search results to a specific time range.
     * If customers set a start time, they must set an end time (and vice versa).
     *
     */
    timeRangeFilter?: IntervalInput | null;
    /**
     * Excludedomains
     * Optional. List of domains to be excluded from the search results.
     * The default limit is 2000 domains.
     */
    excludeDomains?: Array<string> | null;
};

/**
 * GoogleSearch
 * Tool to support Google Search in Model. Powered by Google.
 */
export type GoogleSearchOutput = {
    /**
     * Optional. Filter search results to a specific time range.
     * If customers set a start time, they must set an end time (and vice versa).
     *
     */
    timeRangeFilter?: GoogleGenaiTypesInterval | null;
    /**
     * Excludedomains
     * Optional. List of domains to be excluded from the search results.
     * The default limit is 2000 domains.
     */
    excludeDomains?: Array<string> | null;
};

/**
 * GoogleSearchRetrieval
 * Tool to retrieve public web data for grounding, powered by Google.
 */
export type GoogleSearchRetrievalInput = {
    /**
     * Specifies the dynamic retrieval configuration for the given source.
     */
    dynamicRetrievalConfig?: DynamicRetrievalConfig | null;
};

/**
 * GoogleSearchRetrieval
 * Tool to retrieve public web data for grounding, powered by Google.
 */
export type GoogleSearchRetrievalOutput = {
    /**
     * Specifies the dynamic retrieval configuration for the given source.
     */
    dynamicRetrievalConfig?: DynamicRetrievalConfig | null;
};

/**
 * GroundingChunk
 * Grounding chunk.
 */
export type GroundingChunkInput = {
    /**
     * Grounding chunk from Google Maps.
     */
    maps?: GroundingChunkMapsInput | null;
    /**
     * Grounding chunk from context retrieved by the retrieval tools.
     */
    retrievedContext?: GroundingChunkRetrievedContextInput | null;
    /**
     * Grounding chunk from the web.
     */
    web?: GroundingChunkWeb | null;
};

/**
 * GroundingChunk
 * Grounding chunk.
 */
export type GroundingChunkOutput = {
    /**
     * Grounding chunk from Google Maps.
     */
    maps?: GroundingChunkMapsOutput | null;
    /**
     * Grounding chunk from context retrieved by the retrieval tools.
     */
    retrievedContext?: GroundingChunkRetrievedContextOutput | null;
    /**
     * Grounding chunk from the web.
     */
    web?: GroundingChunkWeb | null;
};

/**
 * GroundingChunkMaps
 * Chunk from Google Maps.
 */
export type GroundingChunkMapsInput = {
    /**
     * Sources used to generate the place answer. This includes review snippets and photos that were used to generate the answer, as well as uris to flag content.
     */
    placeAnswerSources?: GroundingChunkMapsPlaceAnswerSourcesInput | null;
    /**
     * Placeid
     * This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.
     */
    placeId?: string | null;
    /**
     * Text
     * Text of the chunk.
     */
    text?: string | null;
    /**
     * Title
     * Title of the chunk.
     */
    title?: string | null;
    /**
     * Uri
     * URI reference of the chunk.
     */
    uri?: string | null;
};

/**
 * GroundingChunkMaps
 * Chunk from Google Maps.
 */
export type GroundingChunkMapsOutput = {
    /**
     * Sources used to generate the place answer. This includes review snippets and photos that were used to generate the answer, as well as uris to flag content.
     */
    placeAnswerSources?: GroundingChunkMapsPlaceAnswerSourcesOutput | null;
    /**
     * Placeid
     * This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.
     */
    placeId?: string | null;
    /**
     * Text
     * Text of the chunk.
     */
    text?: string | null;
    /**
     * Title
     * Title of the chunk.
     */
    title?: string | null;
    /**
     * Uri
     * URI reference of the chunk.
     */
    uri?: string | null;
};

/**
 * GroundingChunkMapsPlaceAnswerSources
 * Sources used to generate the place answer.
 */
export type GroundingChunkMapsPlaceAnswerSourcesInput = {
    /**
     * Flagcontenturi
     * A link where users can flag a problem with the generated answer.
     */
    flagContentUri?: string | null;
    /**
     * Reviewsnippets
     * Snippets of reviews that are used to generate the answer.
     */
    reviewSnippets?: Array<GroundingChunkMapsPlaceAnswerSourcesReviewSnippet> | null;
};

/**
 * GroundingChunkMapsPlaceAnswerSources
 * Sources used to generate the place answer.
 */
export type GroundingChunkMapsPlaceAnswerSourcesOutput = {
    /**
     * Flagcontenturi
     * A link where users can flag a problem with the generated answer.
     */
    flagContentUri?: string | null;
    /**
     * Reviewsnippets
     * Snippets of reviews that are used to generate the answer.
     */
    reviewSnippets?: Array<GroundingChunkMapsPlaceAnswerSourcesReviewSnippet> | null;
};

/**
 * GroundingChunkMapsPlaceAnswerSourcesAuthorAttribution
 * Author attribution for a photo or review.
 */
export type GroundingChunkMapsPlaceAnswerSourcesAuthorAttribution = {
    /**
     * Displayname
     * Name of the author of the Photo or Review.
     */
    displayName?: string | null;
    /**
     * Photouri
     * Profile photo URI of the author of the Photo or Review.
     */
    photoUri?: string | null;
    /**
     * Uri
     * URI of the author of the Photo or Review.
     */
    uri?: string | null;
};

/**
 * GroundingChunkMapsPlaceAnswerSourcesReviewSnippet
 * Encapsulates a review snippet.
 */
export type GroundingChunkMapsPlaceAnswerSourcesReviewSnippet = {
    /**
     * This review's author.
     */
    authorAttribution?: GroundingChunkMapsPlaceAnswerSourcesAuthorAttribution | null;
    /**
     * Flagcontenturi
     * A link where users can flag a problem with the review.
     */
    flagContentUri?: string | null;
    /**
     * Googlemapsuri
     * A link to show the review on Google Maps.
     */
    googleMapsUri?: string | null;
    /**
     * Relativepublishtimedescription
     * A string of formatted recent time, expressing the review time relative to the current time in a form appropriate for the language and country.
     */
    relativePublishTimeDescription?: string | null;
    /**
     * Review
     * A reference representing this place review which may be used to look up this place review again.
     */
    review?: string | null;
};

/**
 * GroundingChunkRetrievedContext
 * Chunk from context retrieved by the retrieval tools.
 */
export type GroundingChunkRetrievedContextInput = {
    /**
     * Documentname
     * Output only. The full document name for the referenced Vertex AI Search document.
     */
    documentName?: string | null;
    /**
     * Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool.
     */
    ragChunk?: RagChunk | null;
    /**
     * Text
     * Text of the attribution.
     */
    text?: string | null;
    /**
     * Title
     * Title of the attribution.
     */
    title?: string | null;
    /**
     * Uri
     * URI reference of the attribution.
     */
    uri?: string | null;
};

/**
 * GroundingChunkRetrievedContext
 * Chunk from context retrieved by the retrieval tools.
 */
export type GroundingChunkRetrievedContextOutput = {
    /**
     * Documentname
     * Output only. The full document name for the referenced Vertex AI Search document.
     */
    documentName?: string | null;
    /**
     * Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool.
     */
    ragChunk?: RagChunk | null;
    /**
     * Text
     * Text of the attribution.
     */
    text?: string | null;
    /**
     * Title
     * Title of the attribution.
     */
    title?: string | null;
    /**
     * Uri
     * URI reference of the attribution.
     */
    uri?: string | null;
};

/**
 * GroundingChunkWeb
 * Chunk from the web.
 */
export type GroundingChunkWeb = {
    /**
     * Domain
     * Domain of the (original) URI.
     */
    domain?: string | null;
    /**
     * Title
     * Title of the chunk.
     */
    title?: string | null;
    /**
     * Uri
     * URI reference of the chunk.
     */
    uri?: string | null;
};

/**
 * GroundingMetadata
 * Metadata returned to client when grounding is enabled.
 */
export type GroundingMetadataInput = {
    /**
     * Googlemapswidgetcontexttoken
     * Optional. Output only. Resource name of the Google Maps widget context token to be used with the PlacesContextElement widget to render contextual data. This is populated only for Google Maps grounding.
     */
    googleMapsWidgetContextToken?: string | null;
    /**
     * Groundingchunks
     * List of supporting references retrieved from specified grounding source.
     */
    groundingChunks?: Array<GroundingChunkInput> | null;
    /**
     * Groundingsupports
     * Optional. List of grounding support.
     */
    groundingSupports?: Array<GroundingSupport> | null;
    /**
     * Optional. Output only. Retrieval metadata.
     */
    retrievalMetadata?: RetrievalMetadata | null;
    /**
     * Retrievalqueries
     * Optional. Queries executed by the retrieval tools.
     */
    retrievalQueries?: Array<string> | null;
    /**
     * Optional. Google search entry for the following-up web searches.
     */
    searchEntryPoint?: SearchEntryPoint | null;
    /**
     * Websearchqueries
     * Optional. Web search queries for the following-up web search.
     */
    webSearchQueries?: Array<string> | null;
};

/**
 * GroundingMetadata
 * Metadata returned to client when grounding is enabled.
 */
export type GroundingMetadataOutput = {
    /**
     * Googlemapswidgetcontexttoken
     * Optional. Output only. Resource name of the Google Maps widget context token to be used with the PlacesContextElement widget to render contextual data. This is populated only for Google Maps grounding.
     */
    googleMapsWidgetContextToken?: string | null;
    /**
     * Groundingchunks
     * List of supporting references retrieved from specified grounding source.
     */
    groundingChunks?: Array<GroundingChunkOutput> | null;
    /**
     * Groundingsupports
     * Optional. List of grounding support.
     */
    groundingSupports?: Array<GroundingSupport> | null;
    /**
     * Optional. Output only. Retrieval metadata.
     */
    retrievalMetadata?: RetrievalMetadata | null;
    /**
     * Retrievalqueries
     * Optional. Queries executed by the retrieval tools.
     */
    retrievalQueries?: Array<string> | null;
    /**
     * Optional. Google search entry for the following-up web searches.
     */
    searchEntryPoint?: SearchEntryPoint | null;
    /**
     * Websearchqueries
     * Optional. Web search queries for the following-up web search.
     */
    webSearchQueries?: Array<string> | null;
};

/**
 * GroundingSupport
 * Grounding support.
 */
export type GroundingSupport = {
    /**
     * Confidencescores
     * Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. For Gemini 2.0 and before, this list must have the same size as the grounding_chunk_indices. For Gemini 2.5 and after, this list will be empty and should be ignored.
     */
    confidenceScores?: Array<number> | null;
    /**
     * Groundingchunkindices
     * A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim.
     */
    groundingChunkIndices?: Array<number> | null;
    /**
     * Segment of the content this support belongs to.
     */
    segment?: Segment | null;
};

/**
 * HTTPBase
 */
export type HttpBase = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Scheme
     */
    scheme: string;
    [key: string]: unknown | SecuritySchemeType | (string | null) | string | undefined;
};

/**
 * HTTPBearer
 */
export type HttpBearer = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Scheme
     */
    scheme?: 'bearer';
    /**
     * Bearerformat
     */
    bearerFormat?: string | null;
    [key: string]: unknown | SecuritySchemeType | (string | null) | 'bearer' | (string | null) | undefined;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * HarmBlockMethod
 * Optional.
 *
 * Specify if the threshold is used for probability or severity score. If not
 * specified, the threshold is used for probability score.
 */
export type HarmBlockMethod = 'HARM_BLOCK_METHOD_UNSPECIFIED' | 'SEVERITY' | 'PROBABILITY';

/**
 * HarmBlockThreshold
 * Required. The harm block threshold.
 */
export type HarmBlockThreshold = 'HARM_BLOCK_THRESHOLD_UNSPECIFIED' | 'BLOCK_LOW_AND_ABOVE' | 'BLOCK_MEDIUM_AND_ABOVE' | 'BLOCK_ONLY_HIGH' | 'BLOCK_NONE' | 'OFF';

/**
 * HarmCategory
 * Required. Harm category.
 */
export type HarmCategory = 'HARM_CATEGORY_UNSPECIFIED' | 'HARM_CATEGORY_HATE_SPEECH' | 'HARM_CATEGORY_DANGEROUS_CONTENT' | 'HARM_CATEGORY_HARASSMENT' | 'HARM_CATEGORY_SEXUALLY_EXPLICIT' | 'HARM_CATEGORY_CIVIC_INTEGRITY' | 'HARM_CATEGORY_IMAGE_HATE' | 'HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT' | 'HARM_CATEGORY_IMAGE_HARASSMENT' | 'HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT';

/**
 * HttpAuth
 * The credentials and metadata for HTTP authentication.
 */
export type HttpAuth = {
    /**
     * Scheme
     */
    scheme: string;
    credentials: HttpCredentials;
    [key: string]: unknown | string | HttpCredentials;
};

/**
 * HttpCredentials
 * Represents the secret token value for HTTP authentication, like user name, password, oauth token, etc.
 */
export type HttpCredentials = {
    /**
     * Username
     */
    username?: string | null;
    /**
     * Password
     */
    password?: string | null;
    /**
     * Token
     */
    token?: string | null;
    [key: string]: unknown | (string | null) | (string | null) | (string | null) | undefined;
};

/**
 * HttpOptions
 * HTTP options to be used in each of the requests.
 */
export type HttpOptions = {
    /**
     * Baseurl
     * The base URL for the AI platform service endpoint.
     */
    baseUrl?: string | null;
    /**
     * Apiversion
     * Specifies the version of the API to use.
     */
    apiVersion?: string | null;
    /**
     * Headers
     * Additional HTTP headers to be sent with the request.
     */
    headers?: {
        [key: string]: string;
    } | null;
    /**
     * Timeout
     * Timeout for the request in milliseconds.
     */
    timeout?: number | null;
    /**
     * Clientargs
     * Args passed to the HTTP client.
     */
    clientArgs?: {
        [key: string]: unknown;
    } | null;
    /**
     * Asyncclientargs
     * Args passed to the async HTTP client.
     */
    asyncClientArgs?: {
        [key: string]: unknown;
    } | null;
    /**
     * Extrabody
     * Extra parameters to add to the request body.
     * The structure must match the backend API's request structure.
     * - VertexAI backend API docs: https://cloud.google.com/vertex-ai/docs/reference/rest
     * - GeminiAPI backend API docs: https://ai.google.dev/api/rest
     */
    extraBody?: {
        [key: string]: unknown;
    } | null;
    /**
     * HTTP retry options for the request.
     */
    retryOptions?: HttpRetryOptions | null;
};

/**
 * HttpRetryOptions
 * HTTP retry options to be used in each of the requests.
 */
export type HttpRetryOptions = {
    /**
     * Attempts
     * Maximum number of attempts, including the original request.
     * If 0 or 1, it means no retries.
     */
    attempts?: number | null;
    /**
     * Initialdelay
     * Initial delay before the first retry, in fractions of a second.
     */
    initialDelay?: number | null;
    /**
     * Maxdelay
     * Maximum delay between retries, in fractions of a second.
     */
    maxDelay?: number | null;
    /**
     * Expbase
     * Multiplier by which the delay increases after each attempt.
     */
    expBase?: number | null;
    /**
     * Jitter
     * Randomness factor for the delay.
     */
    jitter?: number | null;
    /**
     * Httpstatuscodes
     * List of HTTP status codes that should trigger a retry.
     * If not specified, a default set of retryable codes may be used.
     */
    httpStatusCodes?: Array<number> | null;
};

/**
 * IntermediateData
 * Container for intermediate data that an agent would generate as it responds with a final answer.
 */
export type IntermediateDataInput = {
    /**
     * Tooluses
     */
    toolUses?: Array<FunctionCall>;
    /**
     * Intermediateresponses
     */
    intermediateResponses?: Array<[
        string,
        Array<PartInput>
    ]>;
};

/**
 * IntermediateData
 * Container for intermediate data that an agent would generate as it responds with a final answer.
 */
export type IntermediateDataOutput = {
    /**
     * Tooluses
     */
    toolUses?: Array<FunctionCall>;
    /**
     * Intermediateresponses
     */
    intermediateResponses?: Array<[
        string,
        Array<PartOutput>
    ]>;
};

/**
 * Interval
 * Represents a time interval, encoded as a start time (inclusive) and an end time (exclusive).
 *
 * The start time must be less than or equal to the end time.
 * When the start equals the end time, the interval is an empty interval.
 * (matches no time)
 * When both start and end are unspecified, the interval matches any time.
 */
export type IntervalInput = {
    /**
     * Starttime
     * The start time of the interval.
     */
    startTime?: string | null;
    /**
     * Endtime
     * The end time of the interval.
     */
    endTime?: string | null;
};

/**
 * Invocation
 * Represents a single invocation.
 */
export type InvocationInput = {
    /**
     * Invocationid
     */
    invocationId?: string;
    userContent: ContentInput;
    finalResponse?: ContentInput | null;
    intermediateData?: IntermediateDataInput | null;
    /**
     * Creationtimestamp
     */
    creationTimestamp?: number;
};

/**
 * Invocation
 * Represents a single invocation.
 */
export type InvocationOutput = {
    /**
     * Invocationid
     */
    invocationId?: string;
    userContent: ContentOutput;
    finalResponse?: ContentOutput | null;
    intermediateData?: IntermediateDataOutput | null;
    /**
     * Creationtimestamp
     */
    creationTimestamp?: number;
};

/**
 * JudgeModelOptions
 * Options for an eval metric's judge model.
 */
export type JudgeModelOptionsInput = {
    /**
     * Judge Model
     * The judge model to use for evaluation. It can be a model name.
     */
    judge_model?: string;
    /**
     * The configuration for the judge model.
     */
    judge_model_config?: GenerateContentConfigInput | null;
    /**
     * Num Samples
     * The number of times to sample the model for each invocation evaluation.
     */
    num_samples?: number | null;
};

/**
 * JudgeModelOptions
 * Options for an eval metric's judge model.
 */
export type JudgeModelOptionsOutput = {
    /**
     * Judge Model
     * The judge model to use for evaluation. It can be a model name.
     */
    judge_model?: string;
    /**
     * The configuration for the judge model.
     */
    judge_model_config?: GenerateContentConfigOutput | null;
    /**
     * Num Samples
     * The number of times to sample the model for each invocation evaluation.
     */
    num_samples?: number | null;
};

/**
 * Language
 * Required. Programming language of the `code`.
 */
export type Language = 'LANGUAGE_UNSPECIFIED' | 'PYTHON';

/**
 * LatLng
 * An object that represents a latitude/longitude pair.
 *
 * This is expressed as a pair of doubles to represent degrees latitude and
 * degrees longitude. Unless specified otherwise, this object must conform to the
 * <a href="https://en.wikipedia.org/wiki/World_Geodetic_System#1984_version">
 * WGS84 standard</a>. Values must be within normalized ranges.
 */
export type LatLng = {
    /**
     * Latitude
     * The latitude in degrees. It must be in the range [-90.0, +90.0].
     */
    latitude?: number | null;
    /**
     * Longitude
     * The longitude in degrees. It must be in the range [-180.0, +180.0]
     */
    longitude?: number | null;
};

/**
 * ListEvalResultsResponse
 */
export type ListEvalResultsResponse = {
    /**
     * Evalresultids
     */
    evalResultIds: Array<string>;
};

/**
 * ListEvalSetsResponse
 */
export type ListEvalSetsResponse = {
    /**
     * Evalsetids
     */
    evalSetIds: Array<string>;
};

/**
 * ListMetricsInfoResponse
 */
export type ListMetricsInfoResponse = {
    /**
     * Metricsinfo
     */
    metricsInfo: Array<MetricInfo>;
};

/**
 * LiveServerSessionResumptionUpdate
 * Update of the session resumption state.
 *
 * Only sent if `session_resumption` was set in the connection config.
 */
export type LiveServerSessionResumptionUpdate = {
    /**
     * Newhandle
     * New handle that represents state that can be resumed. Empty if `resumable`=false.
     */
    newHandle?: string | null;
    /**
     * Resumable
     * True if session can be resumed at this point. It might be not possible to resume session at some points. In that case we send update empty new_handle and resumable=false. Example of such case could be model executing function calls or just generating. Resuming session (using previous session token) in such state will result in some data loss.
     */
    resumable?: boolean | null;
    /**
     * Lastconsumedclientmessageindex
     * Index of last message sent by client that is included in state represented by this SessionResumptionToken. Only sent when `SessionResumptionConfig.transparent` is set.
     *
     * Presence of this index allows users to transparently reconnect and avoid issue of losing some part of realtime audio input/video. If client wishes to temporarily disconnect (for example as result of receiving GoAway) they can do it without losing state by buffering messages sent since last `SessionResmumptionTokenUpdate`. This field will enable them to limit buffering (avoid keeping all requests in RAM).
     *
     * Note: This should not be used for when resuming a session at some time later -- in those cases partial audio and video frames arelikely not needed.
     */
    lastConsumedClientMessageIndex?: number | null;
};

/**
 * MediaModality
 * Server content modalities.
 */
export type MediaModality = 'MODALITY_UNSPECIFIED' | 'TEXT' | 'IMAGE' | 'VIDEO' | 'AUDIO' | 'DOCUMENT';

/**
 * MediaResolution
 * The media resolution to use.
 */
export type MediaResolution = 'MEDIA_RESOLUTION_UNSPECIFIED' | 'MEDIA_RESOLUTION_LOW' | 'MEDIA_RESOLUTION_MEDIUM' | 'MEDIA_RESOLUTION_HIGH';

/**
 * MetricInfo
 * Information about the metric that are used for Evals.
 */
export type MetricInfo = {
    /**
     * Metricname
     * The name of the metric.
     */
    metricName: string;
    /**
     * Description
     * A 2 to 3 line description of the metric.
     */
    description?: string;
    /**
     * Information on the nature of values supported by the metric.
     */
    metricValueInfo: MetricValueInfo;
};

/**
 * MetricValueInfo
 * Information about the type of metric value.
 */
export type MetricValueInfo = {
    /**
     * The values represented by the metric are of type interval.
     */
    interval?: GoogleAdkEvaluationEvalMetricsInterval | null;
};

/**
 * ModalityTokenCount
 * Represents token counting info for a single modality.
 */
export type ModalityTokenCount = {
    /**
     * The modality associated with this token count.
     */
    modality?: MediaModality | null;
    /**
     * Tokencount
     * Number of tokens.
     */
    tokenCount?: number | null;
};

/**
 * ModelSelectionConfig
 * Config for model selection.
 */
export type ModelSelectionConfig = {
    /**
     * Options for feature selection preference.
     */
    featureSelectionPreference?: FeatureSelectionPreference | null;
};

/**
 * MultiSpeakerVoiceConfig
 * The configuration for the multi-speaker setup.
 */
export type MultiSpeakerVoiceConfigInput = {
    /**
     * Speakervoiceconfigs
     * The configuration for the speaker to use.
     */
    speakerVoiceConfigs?: Array<SpeakerVoiceConfigInput> | null;
};

/**
 * MultiSpeakerVoiceConfig
 * The configuration for the multi-speaker setup.
 */
export type MultiSpeakerVoiceConfigOutput = {
    /**
     * Speakervoiceconfigs
     * The configuration for the speaker to use.
     */
    speakerVoiceConfigs?: Array<SpeakerVoiceConfigOutput> | null;
};

/**
 * OAuth2
 */
export type OAuth2Input = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    flows: OAuthFlows;
    [key: string]: unknown | SecuritySchemeType | (string | null) | OAuthFlows | undefined;
};

/**
 * OAuth2
 */
export type OAuth2Output = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    flows: OAuthFlows;
    [key: string]: unknown | SecuritySchemeType | (string | null) | OAuthFlows | undefined;
};

/**
 * OAuth2Auth
 * Represents credential value and its metadata for a OAuth2 credential.
 */
export type OAuth2Auth = {
    /**
     * Clientid
     */
    clientId?: string | null;
    /**
     * Clientsecret
     */
    clientSecret?: string | null;
    /**
     * Authuri
     */
    authUri?: string | null;
    /**
     * State
     */
    state?: string | null;
    /**
     * Redirecturi
     */
    redirectUri?: string | null;
    /**
     * Authresponseuri
     */
    authResponseUri?: string | null;
    /**
     * Authcode
     */
    authCode?: string | null;
    /**
     * Accesstoken
     */
    accessToken?: string | null;
    /**
     * Refreshtoken
     */
    refreshToken?: string | null;
    /**
     * Expiresat
     */
    expiresAt?: number | null;
    /**
     * Expiresin
     */
    expiresIn?: number | null;
    [key: string]: unknown | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (number | null) | (number | null) | undefined;
};

/**
 * OAuthFlowAuthorizationCode
 */
export type OAuthFlowAuthorizationCode = {
    /**
     * Refreshurl
     */
    refreshUrl?: string | null;
    /**
     * Scopes
     */
    scopes?: {
        [key: string]: string;
    };
    /**
     * Authorizationurl
     */
    authorizationUrl: string;
    /**
     * Tokenurl
     */
    tokenUrl: string;
    [key: string]: unknown | (string | null) | {
        [key: string]: string;
    } | string | undefined;
};

/**
 * OAuthFlowClientCredentials
 */
export type OAuthFlowClientCredentials = {
    /**
     * Refreshurl
     */
    refreshUrl?: string | null;
    /**
     * Scopes
     */
    scopes?: {
        [key: string]: string;
    };
    /**
     * Tokenurl
     */
    tokenUrl: string;
    [key: string]: unknown | (string | null) | {
        [key: string]: string;
    } | string | undefined;
};

/**
 * OAuthFlowImplicit
 */
export type OAuthFlowImplicit = {
    /**
     * Refreshurl
     */
    refreshUrl?: string | null;
    /**
     * Scopes
     */
    scopes?: {
        [key: string]: string;
    };
    /**
     * Authorizationurl
     */
    authorizationUrl: string;
    [key: string]: unknown | (string | null) | {
        [key: string]: string;
    } | string | undefined;
};

/**
 * OAuthFlowPassword
 */
export type OAuthFlowPassword = {
    /**
     * Refreshurl
     */
    refreshUrl?: string | null;
    /**
     * Scopes
     */
    scopes?: {
        [key: string]: string;
    };
    /**
     * Tokenurl
     */
    tokenUrl: string;
    [key: string]: unknown | (string | null) | {
        [key: string]: string;
    } | string | undefined;
};

/**
 * OAuthFlows
 */
export type OAuthFlows = {
    implicit?: OAuthFlowImplicit | null;
    password?: OAuthFlowPassword | null;
    clientCredentials?: OAuthFlowClientCredentials | null;
    authorizationCode?: OAuthFlowAuthorizationCode | null;
    [key: string]: unknown | (OAuthFlowImplicit | null) | (OAuthFlowPassword | null) | (OAuthFlowClientCredentials | null) | (OAuthFlowAuthorizationCode | null) | undefined;
};

/**
 * OpenIdConnect
 */
export type OpenIdConnect = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Openidconnecturl
     */
    openIdConnectUrl: string;
    [key: string]: unknown | SecuritySchemeType | (string | null) | string | undefined;
};

/**
 * OpenIdConnectWithConfig
 */
export type OpenIdConnectWithConfig = {
    type?: SecuritySchemeType;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Authorization Endpoint
     */
    authorization_endpoint: string;
    /**
     * Token Endpoint
     */
    token_endpoint: string;
    /**
     * Userinfo Endpoint
     */
    userinfo_endpoint?: string | null;
    /**
     * Revocation Endpoint
     */
    revocation_endpoint?: string | null;
    /**
     * Token Endpoint Auth Methods Supported
     */
    token_endpoint_auth_methods_supported?: Array<string> | null;
    /**
     * Grant Types Supported
     */
    grant_types_supported?: Array<string> | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    [key: string]: unknown | SecuritySchemeType | (string | null) | string | (string | null) | (string | null) | (Array<string> | null) | (Array<string> | null) | (Array<string> | null) | undefined;
};

/**
 * Outcome
 * Required. Outcome of the code execution.
 */
export type Outcome = 'OUTCOME_UNSPECIFIED' | 'OUTCOME_OK' | 'OUTCOME_FAILED' | 'OUTCOME_DEADLINE_EXCEEDED';

/**
 * Part
 * A datatype containing media content.
 *
 * Exactly one field within a Part should be set, representing the specific type
 * of content being conveyed. Using multiple fields within the same `Part`
 * instance is considered invalid.
 */
export type PartInput = {
    /**
     * Metadata for a given video.
     */
    videoMetadata?: VideoMetadata | null;
    /**
     * Thought
     * Indicates if the part is thought from the model.
     */
    thought?: boolean | null;
    /**
     * Optional. Inlined bytes data.
     */
    inlineData?: Blob | null;
    /**
     * Optional. URI based data.
     */
    fileData?: FileData | null;
    /**
     * Thoughtsignature
     * An opaque signature for the thought so it can be reused in subsequent requests.
     */
    thoughtSignature?: string | null;
    /**
     * Optional. Result of executing the [ExecutableCode].
     */
    codeExecutionResult?: CodeExecutionResult | null;
    /**
     * Optional. Code generated by the model that is meant to be executed.
     */
    executableCode?: ExecutableCode | null;
    /**
     * Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values.
     */
    functionCall?: FunctionCall | null;
    /**
     * Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model.
     */
    functionResponse?: FunctionResponse | null;
    /**
     * Text
     * Optional. Text part (can be code).
     */
    text?: string | null;
};

/**
 * Part
 * A datatype containing media content.
 *
 * Exactly one field within a Part should be set, representing the specific type
 * of content being conveyed. Using multiple fields within the same `Part`
 * instance is considered invalid.
 */
export type PartOutput = {
    /**
     * Metadata for a given video.
     */
    videoMetadata?: VideoMetadata | null;
    /**
     * Thought
     * Indicates if the part is thought from the model.
     */
    thought?: boolean | null;
    /**
     * Optional. Inlined bytes data.
     */
    inlineData?: Blob | null;
    /**
     * Optional. URI based data.
     */
    fileData?: FileData | null;
    /**
     * Thoughtsignature
     * An opaque signature for the thought so it can be reused in subsequent requests.
     */
    thoughtSignature?: string | null;
    /**
     * Optional. Result of executing the [ExecutableCode].
     */
    codeExecutionResult?: CodeExecutionResult | null;
    /**
     * Optional. Code generated by the model that is meant to be executed.
     */
    executableCode?: ExecutableCode | null;
    /**
     * Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values.
     */
    functionCall?: FunctionCall | null;
    /**
     * Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model.
     */
    functionResponse?: FunctionResponse | null;
    /**
     * Text
     * Optional. Text part (can be code).
     */
    text?: string | null;
};

/**
 * PrebuiltVoiceConfig
 * The configuration for the prebuilt speaker to use.
 */
export type PrebuiltVoiceConfig = {
    /**
     * Voicename
     * The name of the prebuilt voice to use.
     */
    voiceName?: string | null;
};

/**
 * RagChunk
 * A RagChunk includes the content of a chunk of a RagFile, and associated metadata.
 */
export type RagChunk = {
    /**
     * If populated, represents where the chunk starts and ends in the document.
     */
    pageSpan?: RagChunkPageSpan | null;
    /**
     * Text
     * The content of the chunk.
     */
    text?: string | null;
};

/**
 * RagChunkPageSpan
 * Represents where the chunk starts and ends in the document.
 */
export type RagChunkPageSpan = {
    /**
     * Firstpage
     * Page where chunk starts in the document. Inclusive. 1-indexed.
     */
    firstPage?: number | null;
    /**
     * Lastpage
     * Page where chunk ends in the document. Inclusive. 1-indexed.
     */
    lastPage?: number | null;
};

/**
 * RagRetrievalConfig
 * Specifies the context retrieval config.
 */
export type RagRetrievalConfigInput = {
    /**
     * Optional. Config for filters.
     */
    filter?: RagRetrievalConfigFilter | null;
    /**
     * Optional. Config for Hybrid Search.
     */
    hybridSearch?: RagRetrievalConfigHybridSearch | null;
    /**
     * Optional. Config for ranking and reranking.
     */
    ranking?: RagRetrievalConfigRanking | null;
    /**
     * Topk
     * Optional. The number of contexts to retrieve.
     */
    topK?: number | null;
};

/**
 * RagRetrievalConfig
 * Specifies the context retrieval config.
 */
export type RagRetrievalConfigOutput = {
    /**
     * Optional. Config for filters.
     */
    filter?: RagRetrievalConfigFilter | null;
    /**
     * Optional. Config for Hybrid Search.
     */
    hybridSearch?: RagRetrievalConfigHybridSearch | null;
    /**
     * Optional. Config for ranking and reranking.
     */
    ranking?: RagRetrievalConfigRanking | null;
    /**
     * Topk
     * Optional. The number of contexts to retrieve.
     */
    topK?: number | null;
};

/**
 * RagRetrievalConfigFilter
 * Config for filters.
 */
export type RagRetrievalConfigFilter = {
    /**
     * Metadatafilter
     * Optional. String for metadata filtering.
     */
    metadataFilter?: string | null;
    /**
     * Vectordistancethreshold
     * Optional. Only returns contexts with vector distance smaller than the threshold.
     */
    vectorDistanceThreshold?: number | null;
    /**
     * Vectorsimilaritythreshold
     * Optional. Only returns contexts with vector similarity larger than the threshold.
     */
    vectorSimilarityThreshold?: number | null;
};

/**
 * RagRetrievalConfigHybridSearch
 * Config for Hybrid Search.
 */
export type RagRetrievalConfigHybridSearch = {
    /**
     * Alpha
     * Optional. Alpha value controls the weight between dense and sparse vector search results. The range is [0, 1], while 0 means sparse vector search only and 1 means dense vector search only. The default value is 0.5 which balances sparse and dense vector search equally.
     */
    alpha?: number | null;
};

/**
 * RagRetrievalConfigRanking
 * Config for ranking and reranking.
 */
export type RagRetrievalConfigRanking = {
    /**
     * Optional. Config for LlmRanker.
     */
    llmRanker?: RagRetrievalConfigRankingLlmRanker | null;
    /**
     * Optional. Config for Rank Service.
     */
    rankService?: RagRetrievalConfigRankingRankService | null;
};

/**
 * RagRetrievalConfigRankingLlmRanker
 * Config for LlmRanker.
 */
export type RagRetrievalConfigRankingLlmRanker = {
    /**
     * Modelname
     * Optional. The model name used for ranking. See [Supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference#supported-models).
     */
    modelName?: string | null;
};

/**
 * RagRetrievalConfigRankingRankService
 * Config for Rank Service.
 */
export type RagRetrievalConfigRankingRankService = {
    /**
     * Modelname
     * Optional. The model name of the rank service. Format: `semantic-ranker-512@latest`
     */
    modelName?: string | null;
};

/**
 * Retrieval
 * Defines a retrieval tool that model can call to access external knowledge.
 */
export type RetrievalInput = {
    /**
     * Disableattribution
     * Optional. Deprecated. This option is no longer supported.
     */
    disableAttribution?: boolean | null;
    /**
     * Use data source powered by external API for grounding.
     */
    externalApi?: ExternalApiInput | null;
    /**
     * Set to use data source powered by Vertex AI Search.
     */
    vertexAiSearch?: VertexAiSearch | null;
    /**
     * Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService.
     */
    vertexRagStore?: VertexRagStoreInput | null;
};

/**
 * Retrieval
 * Defines a retrieval tool that model can call to access external knowledge.
 */
export type RetrievalOutput = {
    /**
     * Disableattribution
     * Optional. Deprecated. This option is no longer supported.
     */
    disableAttribution?: boolean | null;
    /**
     * Use data source powered by external API for grounding.
     */
    externalApi?: ExternalApiOutput | null;
    /**
     * Set to use data source powered by Vertex AI Search.
     */
    vertexAiSearch?: VertexAiSearch | null;
    /**
     * Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService.
     */
    vertexRagStore?: VertexRagStoreOutput | null;
};

/**
 * RetrievalConfig
 * Retrieval config.
 */
export type RetrievalConfig = {
    /**
     * Optional. The location of the user.
     */
    latLng?: LatLng | null;
    /**
     * Languagecode
     * The language code of the user.
     */
    languageCode?: string | null;
};

/**
 * RetrievalMetadata
 * Metadata related to retrieval in the grounding flow.
 */
export type RetrievalMetadata = {
    /**
     * Googlesearchdynamicretrievalscore
     * Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search.
     */
    googleSearchDynamicRetrievalScore?: number | null;
};

/**
 * RunAgentRequest
 */
export type RunAgentRequest = {
    /**
     * Appname
     */
    appName: string;
    /**
     * Userid
     */
    userId: string;
    /**
     * Sessionid
     */
    sessionId: string;
    newMessage: ContentInput;
    /**
     * Streaming
     */
    streaming?: boolean;
    /**
     * Statedelta
     */
    stateDelta?: {
        [key: string]: unknown;
    } | null;
};

/**
 * RunEvalRequest
 */
export type RunEvalRequest = {
    /**
     * Evalids
     * This field is deprecated, use eval_case_ids instead.
     * @deprecated
     */
    evalIds?: Array<string>;
    /**
     * Evalcaseids
     * List of eval case ids to evaluate. if empty, then all eval cases in the eval set are run.
     */
    evalCaseIds?: Array<string>;
    /**
     * Evalmetrics
     */
    evalMetrics: Array<EvalMetricInput>;
};

/**
 * RunEvalResponse
 */
export type RunEvalResponse = {
    /**
     * Runevalresults
     */
    runEvalResults: Array<RunEvalResult>;
};

/**
 * RunEvalResult
 */
export type RunEvalResult = {
    /**
     * Evalsetfile
     */
    evalSetFile: string;
    /**
     * Evalsetid
     */
    evalSetId: string;
    /**
     * Evalid
     */
    evalId: string;
    finalEvalStatus: EvalStatus;
    /**
     * Evalmetricresults
     * This field is deprecated, use overall_eval_metric_results instead.
     * @deprecated
     */
    evalMetricResults?: Array<[
        EvalMetricOutput,
        EvalMetricResult
    ]>;
    /**
     * Overallevalmetricresults
     */
    overallEvalMetricResults: Array<EvalMetricResult>;
    /**
     * Evalmetricresultperinvocation
     */
    evalMetricResultPerInvocation: Array<EvalMetricResultPerInvocation>;
    /**
     * Userid
     */
    userId: string;
    /**
     * Sessionid
     */
    sessionId: string;
};

/**
 * SafetySetting
 * Safety settings.
 */
export type SafetySetting = {
    /**
     * Determines if the harm block method uses probability or probability
     * and severity scores.
     */
    method?: HarmBlockMethod | null;
    /**
     * Required. Harm category.
     */
    category?: HarmCategory | null;
    /**
     * Required. The harm block threshold.
     */
    threshold?: HarmBlockThreshold | null;
};

/**
 * Schema
 * Schema is used to define the format of input/output data.
 *
 * Represents a select subset of an [OpenAPI 3.0 schema
 * object](https://spec.openapis.org/oas/v3.0.3#schema-object). More fields may
 * be added in the future as needed.
 */
export type SchemaInput = {
    /**
     * Additionalproperties
     * Optional. Can either be a boolean or an object; controls the presence of additional properties.
     */
    additionalProperties?: unknown | null;
    /**
     * Defs
     * Optional. A map of definitions for use by `ref` Only allowed at the root of the schema.
     */
    defs?: {
        [key: string]: SchemaInput;
    } | null;
    /**
     * Ref
     * Optional. Allows indirect references between schema nodes. The value should be a valid reference to a child of the root `defs`. For example, the following schema defines a reference to a schema node named "Pet": type: object properties: pet: ref: #/defs/Pet defs: Pet: type: object properties: name: type: string The value of the "pet" property is a reference to the schema node named "Pet". See details in https://json-schema.org/understanding-json-schema/structuring
     */
    ref?: string | null;
    /**
     * Anyof
     * Optional. The value should be validated against any (one or more) of the subschemas in the list.
     */
    anyOf?: Array<SchemaInput> | null;
    /**
     * Default
     * Optional. Default value of the data.
     */
    default?: unknown | null;
    /**
     * Description
     * Optional. The description of the data.
     */
    description?: string | null;
    /**
     * Enum
     * Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:["101", "201", "301"]}
     */
    enum?: Array<string> | null;
    /**
     * Example
     * Optional. Example of the object. Will only populated when the object is the root.
     */
    example?: unknown | null;
    /**
     * Format
     * Optional. The format of the data. Supported formats: for NUMBER type: "float", "double" for INTEGER type: "int32", "int64" for STRING type: "email", "byte", etc
     */
    format?: string | null;
    /**
     * Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY.
     */
    items?: SchemaInput | null;
    /**
     * Maxitems
     * Optional. Maximum number of the elements for Type.ARRAY.
     */
    maxItems?: number | null;
    /**
     * Maxlength
     * Optional. Maximum length of the Type.STRING
     */
    maxLength?: number | null;
    /**
     * Maxproperties
     * Optional. Maximum number of the properties for Type.OBJECT.
     */
    maxProperties?: number | null;
    /**
     * Maximum
     * Optional. Maximum value of the Type.INTEGER and Type.NUMBER
     */
    maximum?: number | null;
    /**
     * Minitems
     * Optional. Minimum number of the elements for Type.ARRAY.
     */
    minItems?: number | null;
    /**
     * Minlength
     * Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING
     */
    minLength?: number | null;
    /**
     * Minproperties
     * Optional. Minimum number of the properties for Type.OBJECT.
     */
    minProperties?: number | null;
    /**
     * Minimum
     * Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER
     */
    minimum?: number | null;
    /**
     * Nullable
     * Optional. Indicates if the value may be null.
     */
    nullable?: boolean | null;
    /**
     * Pattern
     * Optional. Pattern of the Type.STRING to restrict a string to a regular expression.
     */
    pattern?: string | null;
    /**
     * Properties
     * Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT.
     */
    properties?: {
        [key: string]: SchemaInput;
    } | null;
    /**
     * Propertyordering
     * Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties.
     */
    propertyOrdering?: Array<string> | null;
    /**
     * Required
     * Optional. Required properties of Type.OBJECT.
     */
    required?: Array<string> | null;
    /**
     * Title
     * Optional. The title of the Schema.
     */
    title?: string | null;
    /**
     * Optional. The type of the data.
     */
    type?: Type | null;
};

/**
 * Schema
 * Schema is used to define the format of input/output data.
 *
 * Represents a select subset of an [OpenAPI 3.0 schema
 * object](https://spec.openapis.org/oas/v3.0.3#schema-object). More fields may
 * be added in the future as needed.
 */
export type SchemaOutput = {
    /**
     * Additionalproperties
     * Optional. Can either be a boolean or an object; controls the presence of additional properties.
     */
    additionalProperties?: unknown | null;
    /**
     * Defs
     * Optional. A map of definitions for use by `ref` Only allowed at the root of the schema.
     */
    defs?: {
        [key: string]: SchemaOutput;
    } | null;
    /**
     * Ref
     * Optional. Allows indirect references between schema nodes. The value should be a valid reference to a child of the root `defs`. For example, the following schema defines a reference to a schema node named "Pet": type: object properties: pet: ref: #/defs/Pet defs: Pet: type: object properties: name: type: string The value of the "pet" property is a reference to the schema node named "Pet". See details in https://json-schema.org/understanding-json-schema/structuring
     */
    ref?: string | null;
    /**
     * Anyof
     * Optional. The value should be validated against any (one or more) of the subschemas in the list.
     */
    anyOf?: Array<SchemaOutput> | null;
    /**
     * Default
     * Optional. Default value of the data.
     */
    default?: unknown | null;
    /**
     * Description
     * Optional. The description of the data.
     */
    description?: string | null;
    /**
     * Enum
     * Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:["101", "201", "301"]}
     */
    enum?: Array<string> | null;
    /**
     * Example
     * Optional. Example of the object. Will only populated when the object is the root.
     */
    example?: unknown | null;
    /**
     * Format
     * Optional. The format of the data. Supported formats: for NUMBER type: "float", "double" for INTEGER type: "int32", "int64" for STRING type: "email", "byte", etc
     */
    format?: string | null;
    /**
     * Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY.
     */
    items?: SchemaOutput | null;
    /**
     * Maxitems
     * Optional. Maximum number of the elements for Type.ARRAY.
     */
    maxItems?: number | null;
    /**
     * Maxlength
     * Optional. Maximum length of the Type.STRING
     */
    maxLength?: number | null;
    /**
     * Maxproperties
     * Optional. Maximum number of the properties for Type.OBJECT.
     */
    maxProperties?: number | null;
    /**
     * Maximum
     * Optional. Maximum value of the Type.INTEGER and Type.NUMBER
     */
    maximum?: number | null;
    /**
     * Minitems
     * Optional. Minimum number of the elements for Type.ARRAY.
     */
    minItems?: number | null;
    /**
     * Minlength
     * Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING
     */
    minLength?: number | null;
    /**
     * Minproperties
     * Optional. Minimum number of the properties for Type.OBJECT.
     */
    minProperties?: number | null;
    /**
     * Minimum
     * Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER
     */
    minimum?: number | null;
    /**
     * Nullable
     * Optional. Indicates if the value may be null.
     */
    nullable?: boolean | null;
    /**
     * Pattern
     * Optional. Pattern of the Type.STRING to restrict a string to a regular expression.
     */
    pattern?: string | null;
    /**
     * Properties
     * Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT.
     */
    properties?: {
        [key: string]: SchemaOutput;
    } | null;
    /**
     * Propertyordering
     * Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties.
     */
    propertyOrdering?: Array<string> | null;
    /**
     * Required
     * Optional. Required properties of Type.OBJECT.
     */
    required?: Array<string> | null;
    /**
     * Title
     * Optional. The title of the Schema.
     */
    title?: string | null;
    /**
     * Optional. The type of the data.
     */
    type?: Type | null;
};

/**
 * SearchEntryPoint
 * Google search entry point.
 */
export type SearchEntryPoint = {
    /**
     * Renderedcontent
     * Optional. Web content snippet that can be embedded in a web page or an app webview.
     */
    renderedContent?: string | null;
    /**
     * Sdkblob
     * Optional. Base64 encoded JSON representing array of tuple.
     */
    sdkBlob?: string | null;
};

/**
 * SecuritySchemeType
 */
export type SecuritySchemeType = 'apiKey' | 'http' | 'oauth2' | 'openIdConnect';

/**
 * Segment
 * Segment of the content.
 */
export type Segment = {
    /**
     * Endindex
     * Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero.
     */
    endIndex?: number | null;
    /**
     * Partindex
     * Output only. The index of a Part object within its parent Content object.
     */
    partIndex?: number | null;
    /**
     * Startindex
     * Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero.
     */
    startIndex?: number | null;
    /**
     * Text
     * Output only. The text corresponding to the segment from the response.
     */
    text?: string | null;
};

/**
 * ServiceAccount
 * Represents Google Service Account configuration.
 */
export type ServiceAccount = {
    serviceAccountCredential?: ServiceAccountCredential | null;
    /**
     * Scopes
     */
    scopes: Array<string>;
    /**
     * Usedefaultcredential
     */
    useDefaultCredential?: boolean | null;
    [key: string]: unknown | (ServiceAccountCredential | null) | Array<string> | (boolean | null) | undefined;
};

/**
 * ServiceAccountCredential
 * Represents Google Service Account configuration.
 *
 * Attributes:
 * type: The type should be "service_account".
 * project_id: The project ID.
 * private_key_id: The ID of the private key.
 * private_key: The private key.
 * client_email: The client email.
 * client_id: The client ID.
 * auth_uri: The authorization URI.
 * token_uri: The token URI.
 * auth_provider_x509_cert_url: URL for auth provider's X.509 cert.
 * client_x509_cert_url: URL for the client's X.509 cert.
 * universe_domain: The universe domain.
 *
 * Example:
 *
 * config = ServiceAccountCredential(
 * type_="service_account",
 * project_id="your_project_id",
 * private_key_id="your_private_key_id",
 * private_key="-----BEGIN PRIVATE KEY-----...",
 * client_email="...@....iam.gserviceaccount.com",
 * client_id="your_client_id",
 * auth_uri="https://accounts.google.com/o/oauth2/auth",
 * token_uri="https://oauth2.googleapis.com/token",
 * auth_provider_x509_cert_url="https://www.googleapis.com/oauth2/v1/certs",
 * client_x509_cert_url="https://www.googleapis.com/robot/v1/metadata/x509/...",
 * universe_domain="googleapis.com"
 * )
 *
 *
 * config = ServiceAccountConfig.model_construct(**{
 * ...service account config dict
 * })
 */
export type ServiceAccountCredential = {
    /**
     * Type
     */
    type?: string;
    /**
     * Projectid
     */
    projectId: string;
    /**
     * Privatekeyid
     */
    privateKeyId: string;
    /**
     * Privatekey
     */
    privateKey: string;
    /**
     * Clientemail
     */
    clientEmail: string;
    /**
     * Clientid
     */
    clientId: string;
    /**
     * Authuri
     */
    authUri: string;
    /**
     * Tokenuri
     */
    tokenUri: string;
    /**
     * Authproviderx509Certurl
     */
    authProviderX509CertUrl: string;
    /**
     * Clientx509Certurl
     */
    clientX509CertUrl: string;
    /**
     * Universedomain
     */
    universeDomain: string;
    [key: string]: unknown | string | undefined;
};

/**
 * Session
 * Represents a series of interactions between a user and agents.
 *
 * Attributes:
 * id: The unique identifier of the session.
 * app_name: The name of the app.
 * user_id: The id of the user.
 * state: The state of the session.
 * events: The events of the session, e.g. user input, model response, function
 * call/response, etc.
 * last_update_time: The last update time of the session.
 */
export type Session = {
    /**
     * Id
     */
    id: string;
    /**
     * Appname
     */
    appName: string;
    /**
     * Userid
     */
    userId: string;
    /**
     * State
     */
    state?: {
        [key: string]: unknown;
    };
    /**
     * Events
     */
    events?: Array<EventOutput>;
    /**
     * Lastupdatetime
     */
    lastUpdateTime?: number;
};

/**
 * SessionInput
 * Values that help initialize a Session.
 */
export type SessionInput = {
    /**
     * Appname
     */
    appName: string;
    /**
     * Userid
     */
    userId: string;
    /**
     * State
     */
    state?: {
        [key: string]: unknown;
    };
};

/**
 * SpeakerVoiceConfig
 * The configuration for the speaker to use.
 */
export type SpeakerVoiceConfigInput = {
    /**
     * Speaker
     * The name of the speaker to use. Should be the same as in the
     * prompt.
     */
    speaker?: string | null;
    /**
     * The configuration for the voice to use.
     */
    voiceConfig?: VoiceConfig | null;
};

/**
 * SpeakerVoiceConfig
 * The configuration for the speaker to use.
 */
export type SpeakerVoiceConfigOutput = {
    /**
     * Speaker
     * The name of the speaker to use. Should be the same as in the
     * prompt.
     */
    speaker?: string | null;
    /**
     * The configuration for the voice to use.
     */
    voiceConfig?: VoiceConfig | null;
};

/**
 * SpeechConfig
 * The speech generation configuration.
 */
export type SpeechConfigInput = {
    /**
     * The configuration for the speaker to use.
     *
     */
    voiceConfig?: VoiceConfig | null;
    /**
     * The configuration for the multi-speaker setup.
     * It is mutually exclusive with the voice_config field.
     *
     */
    multiSpeakerVoiceConfig?: MultiSpeakerVoiceConfigInput | null;
    /**
     * Languagecode
     * Language code (ISO 639. e.g. en-US) for the speech synthesization.
     * Only available for Live API.
     *
     */
    languageCode?: string | null;
};

/**
 * SpeechConfig
 * The speech generation configuration.
 */
export type SpeechConfigOutput = {
    /**
     * The configuration for the speaker to use.
     *
     */
    voiceConfig?: VoiceConfig | null;
    /**
     * The configuration for the multi-speaker setup.
     * It is mutually exclusive with the voice_config field.
     *
     */
    multiSpeakerVoiceConfig?: MultiSpeakerVoiceConfigOutput | null;
    /**
     * Languagecode
     * Language code (ISO 639. e.g. en-US) for the speech synthesization.
     * Only available for Live API.
     *
     */
    languageCode?: string | null;
};

/**
 * ThinkingConfig
 * The thinking features configuration.
 */
export type ThinkingConfig = {
    /**
     * Includethoughts
     * Indicates whether to include thoughts in the response. If true, thoughts are returned only if the model supports thought and thoughts are available.
     *
     */
    includeThoughts?: boolean | null;
    /**
     * Thinkingbudget
     * Indicates the thinking budget in tokens. 0 is DISABLED. -1 is AUTOMATIC. The default values and allowed ranges are model dependent.
     *
     */
    thinkingBudget?: number | null;
};

/**
 * ToolAnnotations
 * Additional properties describing a Tool to clients.
 *
 * NOTE: all properties in ToolAnnotations are **hints**.
 * They are not guaranteed to provide a faithful description of
 * tool behavior (including descriptive properties like `title`).
 *
 * Clients should never make tool use decisions based on ToolAnnotations
 * received from untrusted servers.
 */
export type ToolAnnotations = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Readonlyhint
     */
    readOnlyHint?: boolean | null;
    /**
     * Destructivehint
     */
    destructiveHint?: boolean | null;
    /**
     * Idempotenthint
     */
    idempotentHint?: boolean | null;
    /**
     * Openworldhint
     */
    openWorldHint?: boolean | null;
    [key: string]: unknown | (string | null) | (boolean | null) | (boolean | null) | (boolean | null) | (boolean | null) | undefined;
};

/**
 * ToolCodeExecution
 * Tool that executes code generated by the model, and automatically returns the result to the model.
 *
 * See also [ExecutableCode]and [CodeExecutionResult] which are input and output
 * to this tool.
 */
export type ToolCodeExecution = {
    [key: string]: never;
};

/**
 * ToolComputerUse
 * Tool to support computer use.
 */
export type ToolComputerUse = {
    /**
     * Required. The environment being operated.
     */
    environment?: Environment | null;
};

/**
 * ToolConfig
 * Tool config.
 *
 * This config is shared for all tools provided in the request.
 */
export type ToolConfigInput = {
    /**
     * Optional. Function calling config.
     */
    functionCallingConfig?: FunctionCallingConfig | null;
    /**
     * Optional. Retrieval config.
     */
    retrievalConfig?: RetrievalConfig | null;
};

/**
 * ToolConfig
 * Tool config.
 *
 * This config is shared for all tools provided in the request.
 */
export type ToolConfigOutput = {
    /**
     * Optional. Function calling config.
     */
    functionCallingConfig?: FunctionCallingConfig | null;
    /**
     * Optional. Retrieval config.
     */
    retrievalConfig?: RetrievalConfig | null;
};

/**
 * TrafficType
 * Output only.
 *
 * Traffic type. This shows whether a request consumes Pay-As-You-Go or
 * Provisioned Throughput quota.
 */
export type TrafficType = 'TRAFFIC_TYPE_UNSPECIFIED' | 'ON_DEMAND' | 'PROVISIONED_THROUGHPUT';

/**
 * Transcription
 * Audio transcription in Server Conent.
 */
export type Transcription = {
    /**
     * Text
     * Transcription text.
     *
     */
    text?: string | null;
    /**
     * Finished
     * The bool indicates the end of the transcription.
     *
     */
    finished?: boolean | null;
};

/**
 * Type
 * Optional. The type of the data.
 */
export type Type = 'TYPE_UNSPECIFIED' | 'STRING' | 'NUMBER' | 'INTEGER' | 'BOOLEAN' | 'ARRAY' | 'OBJECT' | 'NULL';

/**
 * UrlContext
 * Tool to support URL context retrieval.
 */
export type UrlContext = {
    [key: string]: never;
};

/**
 * UserCreate
 * Schema for user registration
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserLogin
 * Schema for user login
 */
export type UserLogin = {
    /**
     * Email Or Username
     */
    email_or_username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserResponse
 * Schema for user data in API responses (without sensitive fields)
 */
export type UserResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * Username
     */
    username: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Is Active
     */
    is_active: boolean;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VertexAISearch
 * Retrieve from Vertex AI Search datastore or engine for grounding.
 *
 * datastore and engine are mutually exclusive. See
 * https://cloud.google.com/products/agent-builder
 */
export type VertexAiSearch = {
    /**
     * Datastorespecs
     * Specifications that define the specific DataStores to be searched, along with configurations for those data stores. This is only considered for Engines with multiple data stores. It should only be set if engine is used.
     */
    dataStoreSpecs?: Array<VertexAiSearchDataStoreSpec> | null;
    /**
     * Datastore
     * Optional. Fully-qualified Vertex AI Search data store resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}`
     */
    datastore?: string | null;
    /**
     * Engine
     * Optional. Fully-qualified Vertex AI Search engine resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}`
     */
    engine?: string | null;
    /**
     * Filter
     * Optional. Filter strings to be passed to the search API.
     */
    filter?: string | null;
    /**
     * Maxresults
     * Optional. Number of search results to return per query. The default value is 10. The maximumm allowed value is 10.
     */
    maxResults?: number | null;
};

/**
 * VertexAISearchDataStoreSpec
 * Define data stores within engine to filter on in a search call and configurations for those data stores.
 *
 * For more information, see
 * https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1#datastorespec
 */
export type VertexAiSearchDataStoreSpec = {
    /**
     * Datastore
     * Full resource name of DataStore, such as Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}`
     */
    dataStore?: string | null;
    /**
     * Filter
     * Optional. Filter specification to filter documents in the data store specified by data_store field. For more information on filtering, see [Filtering](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
     */
    filter?: string | null;
};

/**
 * VertexRagStore
 * Retrieve from Vertex RAG Store for grounding.
 */
export type VertexRagStoreInput = {
    /**
     * Ragcorpora
     * Optional. Deprecated. Please use rag_resources instead.
     */
    ragCorpora?: Array<string> | null;
    /**
     * Ragresources
     * Optional. The representation of the rag source. It can be used to specify corpus only or ragfiles. Currently only support one corpus or multiple files from one corpus. In the future we may open up multiple corpora support.
     */
    ragResources?: Array<VertexRagStoreRagResource> | null;
    /**
     * Optional. The retrieval config for the Rag query.
     */
    ragRetrievalConfig?: RagRetrievalConfigInput | null;
    /**
     * Similaritytopk
     * Optional. Number of top k results to return from the selected corpora.
     */
    similarityTopK?: number | null;
    /**
     * Storecontext
     * Optional. Currently only supported for Gemini Multimodal Live API. In Gemini Multimodal Live API, if `store_context` bool is specified, Gemini will leverage it to automatically memorize the interactions between the client and Gemini, and retrieve context when needed to augment the response generation for users' ongoing and future interactions.
     */
    storeContext?: boolean | null;
    /**
     * Vectordistancethreshold
     * Optional. Only return results with vector distance smaller than the threshold.
     */
    vectorDistanceThreshold?: number | null;
};

/**
 * VertexRagStore
 * Retrieve from Vertex RAG Store for grounding.
 */
export type VertexRagStoreOutput = {
    /**
     * Ragcorpora
     * Optional. Deprecated. Please use rag_resources instead.
     */
    ragCorpora?: Array<string> | null;
    /**
     * Ragresources
     * Optional. The representation of the rag source. It can be used to specify corpus only or ragfiles. Currently only support one corpus or multiple files from one corpus. In the future we may open up multiple corpora support.
     */
    ragResources?: Array<VertexRagStoreRagResource> | null;
    /**
     * Optional. The retrieval config for the Rag query.
     */
    ragRetrievalConfig?: RagRetrievalConfigOutput | null;
    /**
     * Similaritytopk
     * Optional. Number of top k results to return from the selected corpora.
     */
    similarityTopK?: number | null;
    /**
     * Storecontext
     * Optional. Currently only supported for Gemini Multimodal Live API. In Gemini Multimodal Live API, if `store_context` bool is specified, Gemini will leverage it to automatically memorize the interactions between the client and Gemini, and retrieve context when needed to augment the response generation for users' ongoing and future interactions.
     */
    storeContext?: boolean | null;
    /**
     * Vectordistancethreshold
     * Optional. Only return results with vector distance smaller than the threshold.
     */
    vectorDistanceThreshold?: number | null;
};

/**
 * VertexRagStoreRagResource
 * The definition of the Rag resource.
 */
export type VertexRagStoreRagResource = {
    /**
     * Ragcorpus
     * Optional. RagCorpora resource name. Format: `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
     */
    ragCorpus?: string | null;
    /**
     * Ragfileids
     * Optional. rag_file_id. The files should be in the same rag_corpus set in rag_corpus field.
     */
    ragFileIds?: Array<string> | null;
};

/**
 * VideoMetadata
 * Describes how the video in the Part should be used by the model.
 */
export type VideoMetadata = {
    /**
     * Fps
     * The frame rate of the video sent to the model. If not specified, the
     * default value will be 1.0. The fps range is (0.0, 24.0].
     */
    fps?: number | null;
    /**
     * Endoffset
     * Optional. The end offset of the video.
     */
    endOffset?: string | null;
    /**
     * Startoffset
     * Optional. The start offset of the video.
     */
    startOffset?: string | null;
};

/**
 * VoiceConfig
 * The configuration for the voice to use.
 */
export type VoiceConfig = {
    /**
     * The configuration for the speaker to use.
     *
     */
    prebuiltVoiceConfig?: PrebuiltVoiceConfig | null;
};

/**
 * AuthConfig
 * The auth config sent by tool asking client to collect auth credentials and
 *
 * adk and client will help to fill in the response
 */
export type GoogleAdkAuthAuthToolAuthConfigInput = {
    /**
     * Authscheme
     */
    authScheme: ApiKey | HttpBase | OAuth2Input | OpenIdConnect | HttpBearer | OpenIdConnectWithConfig;
    rawAuthCredential?: AuthCredentialInput | null;
    exchangedAuthCredential?: AuthCredentialInput | null;
    /**
     * Credentialkey
     */
    credentialKey?: string | null;
    [key: string]: unknown | (ApiKey | HttpBase | OAuth2Input | OpenIdConnect | HttpBearer | OpenIdConnectWithConfig) | (AuthCredentialInput | null) | (AuthCredentialInput | null) | (string | null) | undefined;
};

/**
 * AuthConfig
 * The auth config sent by tool asking client to collect auth credentials and
 *
 * adk and client will help to fill in the response
 */
export type GoogleAdkAuthAuthToolAuthConfigOutput = {
    /**
     * Authscheme
     */
    authScheme: ApiKey | HttpBase | OAuth2Output | OpenIdConnect | HttpBearer | OpenIdConnectWithConfig;
    rawAuthCredential?: AuthCredentialOutput | null;
    exchangedAuthCredential?: AuthCredentialOutput | null;
    /**
     * Credentialkey
     */
    credentialKey?: string | null;
    [key: string]: unknown | (ApiKey | HttpBase | OAuth2Output | OpenIdConnect | HttpBearer | OpenIdConnectWithConfig) | (AuthCredentialOutput | null) | (AuthCredentialOutput | null) | (string | null) | undefined;
};

/**
 * Interval
 * Represents a range of numeric values, e.g. [0 ,1] or (2,3) or [-1, 6).
 */
export type GoogleAdkEvaluationEvalMetricsInterval = {
    /**
     * Min Value
     * The smaller end of the interval.
     */
    min_value: number;
    /**
     * Open At Min
     * The interval is Open on the min end. The default value is False, which means that we assume that the interval is Closed.
     */
    open_at_min?: boolean;
    /**
     * Max Value
     * The larger end of the interval.
     */
    max_value: number;
    /**
     * Open At Max
     * The interval is Open on the max end. The default value is False, which means that we assume that the interval is Closed.
     */
    open_at_max?: boolean;
};

/**
 * AuthConfig
 * Auth configuration to run the extension.
 */
export type GoogleGenaiTypesAuthConfig = {
    /**
     * Config for API key auth.
     */
    apiKeyConfig?: ApiKeyConfig | null;
    /**
     * Type of auth scheme.
     */
    authType?: AuthType | null;
    /**
     * Config for Google Service Account auth.
     */
    googleServiceAccountConfig?: AuthConfigGoogleServiceAccountConfig | null;
    /**
     * Config for HTTP Basic auth.
     */
    httpBasicAuthConfig?: AuthConfigHttpBasicAuthConfig | null;
    /**
     * Config for user oauth.
     */
    oauthConfig?: AuthConfigOauthConfig | null;
    /**
     * Config for user OIDC auth.
     */
    oidcConfig?: AuthConfigOidcConfig | null;
};

/**
 * Interval
 * Represents a time interval, encoded as a start time (inclusive) and an end time (exclusive).
 *
 * The start time must be less than or equal to the end time.
 * When the start equals the end time, the interval is an empty interval.
 * (matches no time)
 * When both start and end are unspecified, the interval matches any time.
 */
export type GoogleGenaiTypesInterval = {
    /**
     * Starttime
     * The start time of the interval.
     */
    startTime?: string | null;
    /**
     * Endtime
     * The end time of the interval.
     */
    endTime?: string | null;
};

/**
 * Tool
 * Tool details of a tool that the model may use to generate a response.
 */
export type GoogleGenaiTypesToolInput = {
    /**
     * Functiondeclarations
     * List of function declarations that the tool supports.
     */
    functionDeclarations?: Array<FunctionDeclarationInput> | null;
    /**
     * Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation.
     */
    retrieval?: RetrievalInput | null;
    /**
     * Optional. Google Search tool type. Specialized retrieval tool
     * that is powered by Google Search.
     */
    googleSearch?: GoogleSearchInput | null;
    /**
     * Optional. GoogleSearchRetrieval tool type. Specialized retrieval tool that is powered by Google search.
     */
    googleSearchRetrieval?: GoogleSearchRetrievalInput | null;
    /**
     * Optional. Enterprise web search tool type. Specialized retrieval
     * tool that is powered by Vertex AI Search and Sec4 compliance.
     */
    enterpriseWebSearch?: EnterpriseWebSearch | null;
    /**
     * Optional. Google Maps tool type. Specialized retrieval tool
     * that is powered by Google Maps.
     */
    googleMaps?: GoogleMapsInput | null;
    /**
     * Optional. Tool to support URL context retrieval.
     */
    urlContext?: UrlContext | null;
    /**
     * Optional. Tool to support the model interacting directly with the
     * computer. If enabled, it automatically populates computer-use specific
     * Function Declarations.
     */
    computerUse?: ToolComputerUse | null;
    /**
     * Optional. CodeExecution tool type. Enables the model to execute code as part of generation.
     */
    codeExecution?: ToolCodeExecution | null;
};

/**
 * Tool
 * Tool details of a tool that the model may use to generate a response.
 */
export type GoogleGenaiTypesToolOutput = {
    /**
     * Functiondeclarations
     * List of function declarations that the tool supports.
     */
    functionDeclarations?: Array<FunctionDeclarationOutput> | null;
    /**
     * Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation.
     */
    retrieval?: RetrievalOutput | null;
    /**
     * Optional. Google Search tool type. Specialized retrieval tool
     * that is powered by Google Search.
     */
    googleSearch?: GoogleSearchOutput | null;
    /**
     * Optional. GoogleSearchRetrieval tool type. Specialized retrieval tool that is powered by Google search.
     */
    googleSearchRetrieval?: GoogleSearchRetrievalOutput | null;
    /**
     * Optional. Enterprise web search tool type. Specialized retrieval
     * tool that is powered by Vertex AI Search and Sec4 compliance.
     */
    enterpriseWebSearch?: EnterpriseWebSearch | null;
    /**
     * Optional. Google Maps tool type. Specialized retrieval tool
     * that is powered by Google Maps.
     */
    googleMaps?: GoogleMapsOutput | null;
    /**
     * Optional. Tool to support URL context retrieval.
     */
    urlContext?: UrlContext | null;
    /**
     * Optional. Tool to support the model interacting directly with the
     * computer. If enabled, it automatically populates computer-use specific
     * Function Declarations.
     */
    computerUse?: ToolComputerUse | null;
    /**
     * Optional. CodeExecution tool type. Enables the model to execute code as part of generation.
     */
    codeExecution?: ToolCodeExecution | null;
};

/**
 * Tool
 * Definition for a tool the client can call.
 */
export type McpTypesTool = {
    /**
     * Name
     */
    name: string;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Inputschema
     */
    inputSchema: {
        [key: string]: unknown;
    };
    /**
     * Outputschema
     */
    outputSchema?: {
        [key: string]: unknown;
    } | null;
    annotations?: ToolAnnotations | null;
    /**
     * Meta
     */
    _meta?: {
        [key: string]: unknown;
    } | null;
    [key: string]: unknown | string | (string | null) | (string | null) | {
        [key: string]: unknown;
    } | ({
        [key: string]: unknown;
    } | null) | (ToolAnnotations | null) | ({
        [key: string]: unknown;
    } | null) | undefined;
};

export type ListAppsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/list-apps';
};

export type ListAppsResponses = {
    /**
     * Response List Apps List Apps Get
     * Successful Response
     */
    200: Array<string>;
};

export type ListAppsResponse = ListAppsResponses[keyof ListAppsResponses];

export type DebugGetTraceDictData = {
    body?: never;
    path: {
        /**
         * Event Id
         */
        event_id: string;
    };
    query?: never;
    url: '/debug/trace/{event_id}';
};

export type DebugGetTraceDictErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DebugGetTraceDictError = DebugGetTraceDictErrors[keyof DebugGetTraceDictErrors];

export type DebugGetTraceDictResponses = {
    /**
     * Response Get Trace Dict Debug Trace  Event Id  Get
     * Successful Response
     */
    200: unknown;
};

export type DebugGetSessionTraceData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/debug/trace/session/{session_id}';
};

export type DebugGetSessionTraceErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DebugGetSessionTraceError = DebugGetSessionTraceErrors[keyof DebugGetSessionTraceErrors];

export type DebugGetSessionTraceResponses = {
    /**
     * Response Get Session Trace Debug Trace Session  Session Id  Get
     * Successful Response
     */
    200: unknown;
};

export type DeleteSessionData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}';
};

export type DeleteSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSessionError = DeleteSessionErrors[keyof DeleteSessionErrors];

export type DeleteSessionResponses = {
    /**
     * Response Delete Session Apps  App Name  Users  User Id  Sessions  Session Id  Delete
     * Successful Response
     */
    200: null;
};

export type DeleteSessionResponse = DeleteSessionResponses[keyof DeleteSessionResponses];

export type GetSessionData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}';
};

export type GetSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSessionError = GetSessionErrors[keyof GetSessionErrors];

export type GetSessionResponses = {
    /**
     * Successful Response
     */
    200: Session;
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type CreateSessionWithIdData = {
    /**
     * State
     */
    body?: {
        [key: string]: unknown;
    } | null;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}';
};

export type CreateSessionWithIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSessionWithIdError = CreateSessionWithIdErrors[keyof CreateSessionWithIdErrors];

export type CreateSessionWithIdResponses = {
    /**
     * Successful Response
     */
    200: Session;
};

export type CreateSessionWithIdResponse = CreateSessionWithIdResponses[keyof CreateSessionWithIdResponses];

export type ListSessionsData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions';
};

export type ListSessionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSessionsError = ListSessionsErrors[keyof ListSessionsErrors];

export type ListSessionsResponses = {
    /**
     * Response List Sessions Apps  App Name  Users  User Id  Sessions Get
     * Successful Response
     */
    200: Array<Session>;
};

export type ListSessionsResponse = ListSessionsResponses[keyof ListSessionsResponses];

export type CreateSessionData = {
    body?: BodyCreateSessionAppsAppNameUsersUserIdSessionsPost;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions';
};

export type CreateSessionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSessionError = CreateSessionErrors[keyof CreateSessionErrors];

export type CreateSessionResponses = {
    /**
     * Successful Response
     */
    200: Session;
};

export type CreateSessionResponse = CreateSessionResponses[keyof CreateSessionResponses];

export type EvaluationListEvalSetsData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets';
};

export type EvaluationListEvalSetsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationListEvalSetsError = EvaluationListEvalSetsErrors[keyof EvaluationListEvalSetsErrors];

export type EvaluationListEvalSetsResponses = {
    /**
     * Successful Response
     */
    200: ListEvalSetsResponse;
};

export type EvaluationListEvalSetsResponse = EvaluationListEvalSetsResponses[keyof EvaluationListEvalSetsResponses];

export type EvaluationCreateEvalSetData = {
    body: CreateEvalSetRequest;
    path: {
        /**
         * App Name
         */
        app_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets';
};

export type EvaluationCreateEvalSetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationCreateEvalSetError = EvaluationCreateEvalSetErrors[keyof EvaluationCreateEvalSetErrors];

export type EvaluationCreateEvalSetResponses = {
    /**
     * Successful Response
     */
    200: EvalSetOutput;
};

export type EvaluationCreateEvalSetResponse = EvaluationCreateEvalSetResponses[keyof EvaluationCreateEvalSetResponses];

export type EvaluationCreateEvalSetLegacyData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}';
};

export type EvaluationCreateEvalSetLegacyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationCreateEvalSetLegacyError = EvaluationCreateEvalSetLegacyErrors[keyof EvaluationCreateEvalSetLegacyErrors];

export type EvaluationCreateEvalSetLegacyResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EvaluationListEvalSetsLegacyData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets';
};

export type EvaluationListEvalSetsLegacyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationListEvalSetsLegacyError = EvaluationListEvalSetsLegacyErrors[keyof EvaluationListEvalSetsLegacyErrors];

export type EvaluationListEvalSetsLegacyResponses = {
    /**
     * Response List Eval Sets Legacy Apps  App Name  Eval Sets Get
     * Successful Response
     */
    200: Array<string>;
};

export type EvaluationListEvalSetsLegacyResponse = EvaluationListEvalSetsLegacyResponses[keyof EvaluationListEvalSetsLegacyResponses];

export type EvaluationAddSessionToEvalSetData = {
    body: AddSessionToEvalSetRequest;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}/add_session';
};

export type EvaluationAddSessionToEvalSetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationAddSessionToEvalSetError = EvaluationAddSessionToEvalSetErrors[keyof EvaluationAddSessionToEvalSetErrors];

export type EvaluationAddSessionToEvalSetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EvaluationAddSessionToEvalSet2Data = {
    body: AddSessionToEvalSetRequest;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets/{eval_set_id}/add-session';
};

export type EvaluationAddSessionToEvalSet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationAddSessionToEvalSet2Error = EvaluationAddSessionToEvalSet2Errors[keyof EvaluationAddSessionToEvalSet2Errors];

export type EvaluationAddSessionToEvalSet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EvaluationListEvalsInEvalSetData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals';
};

export type EvaluationListEvalsInEvalSetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationListEvalsInEvalSetError = EvaluationListEvalsInEvalSetErrors[keyof EvaluationListEvalsInEvalSetErrors];

export type EvaluationListEvalsInEvalSetResponses = {
    /**
     * Response List Evals In Eval Set Apps  App Name  Eval Sets  Eval Set Id  Evals Get
     * Successful Response
     */
    200: Array<string>;
};

export type EvaluationListEvalsInEvalSetResponse = EvaluationListEvalsInEvalSetResponses[keyof EvaluationListEvalsInEvalSetResponses];

export type EvaluationDeleteEvalData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
        /**
         * Eval Case Id
         */
        eval_case_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}';
};

export type EvaluationDeleteEvalErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationDeleteEvalError = EvaluationDeleteEvalErrors[keyof EvaluationDeleteEvalErrors];

export type EvaluationDeleteEvalResponses = {
    /**
     * Response Delete Eval Apps  App Name  Eval Sets  Eval Set Id  Evals  Eval Case Id  Delete
     * Successful Response
     */
    200: null;
};

export type EvaluationDeleteEvalResponse = EvaluationDeleteEvalResponses[keyof EvaluationDeleteEvalResponses];

export type EvaluationGetEvalData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
        /**
         * Eval Case Id
         */
        eval_case_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}';
};

export type EvaluationGetEvalErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationGetEvalError = EvaluationGetEvalErrors[keyof EvaluationGetEvalErrors];

export type EvaluationGetEvalResponses = {
    /**
     * Successful Response
     */
    200: EvalCaseOutput;
};

export type EvaluationGetEvalResponse = EvaluationGetEvalResponses[keyof EvaluationGetEvalResponses];

export type EvaluationUpdateEvalData = {
    body: EvalCaseInput;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
        /**
         * Eval Case Id
         */
        eval_case_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}';
};

export type EvaluationUpdateEvalErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationUpdateEvalError = EvaluationUpdateEvalErrors[keyof EvaluationUpdateEvalErrors];

export type EvaluationUpdateEvalResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EvaluationDeleteEval2Data = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
        /**
         * Eval Case Id
         */
        eval_case_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets/{eval_set_id}/eval-cases/{eval_case_id}';
};

export type EvaluationDeleteEval2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationDeleteEval2Error = EvaluationDeleteEval2Errors[keyof EvaluationDeleteEval2Errors];

export type EvaluationDeleteEval2Responses = {
    /**
     * Response Delete Eval Apps  App Name  Eval Sets  Eval Set Id  Eval Cases  Eval Case Id  Delete
     * Successful Response
     */
    200: null;
};

export type EvaluationDeleteEval2Response = EvaluationDeleteEval2Responses[keyof EvaluationDeleteEval2Responses];

export type EvaluationGetEval2Data = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
        /**
         * Eval Case Id
         */
        eval_case_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets/{eval_set_id}/eval-cases/{eval_case_id}';
};

export type EvaluationGetEval2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationGetEval2Error = EvaluationGetEval2Errors[keyof EvaluationGetEval2Errors];

export type EvaluationGetEval2Responses = {
    /**
     * Successful Response
     */
    200: EvalCaseOutput;
};

export type EvaluationGetEval2Response = EvaluationGetEval2Responses[keyof EvaluationGetEval2Responses];

export type EvaluationUpdateEval2Data = {
    body: EvalCaseInput;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
        /**
         * Eval Case Id
         */
        eval_case_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets/{eval_set_id}/eval-cases/{eval_case_id}';
};

export type EvaluationUpdateEval2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationUpdateEval2Error = EvaluationUpdateEval2Errors[keyof EvaluationUpdateEval2Errors];

export type EvaluationUpdateEval2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EvaluationRunEvalLegacyData = {
    body: RunEvalRequest;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_sets/{eval_set_id}/run_eval';
};

export type EvaluationRunEvalLegacyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationRunEvalLegacyError = EvaluationRunEvalLegacyErrors[keyof EvaluationRunEvalLegacyErrors];

export type EvaluationRunEvalLegacyResponses = {
    /**
     * Response Run Eval Legacy Apps  App Name  Eval Sets  Eval Set Id  Run Eval Post
     * Successful Response
     */
    200: Array<RunEvalResult>;
};

export type EvaluationRunEvalLegacyResponse = EvaluationRunEvalLegacyResponses[keyof EvaluationRunEvalLegacyResponses];

export type EvaluationRunEvalData = {
    body: RunEvalRequest;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Set Id
         */
        eval_set_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-sets/{eval_set_id}/run';
};

export type EvaluationRunEvalErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationRunEvalError = EvaluationRunEvalErrors[keyof EvaluationRunEvalErrors];

export type EvaluationRunEvalResponses = {
    /**
     * Successful Response
     */
    200: RunEvalResponse;
};

export type EvaluationRunEvalResponse = EvaluationRunEvalResponses[keyof EvaluationRunEvalResponses];

export type EvaluationGetEvalResultData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Result Id
         */
        eval_result_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-results/{eval_result_id}';
};

export type EvaluationGetEvalResultErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationGetEvalResultError = EvaluationGetEvalResultErrors[keyof EvaluationGetEvalResultErrors];

export type EvaluationGetEvalResultResponses = {
    /**
     * Successful Response
     */
    200: EvalResult;
};

export type EvaluationGetEvalResultResponse = EvaluationGetEvalResultResponses[keyof EvaluationGetEvalResultResponses];

export type EvaluationGetEvalResultLegacyData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * Eval Result Id
         */
        eval_result_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_results/{eval_result_id}';
};

export type EvaluationGetEvalResultLegacyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationGetEvalResultLegacyError = EvaluationGetEvalResultLegacyErrors[keyof EvaluationGetEvalResultLegacyErrors];

export type EvaluationGetEvalResultLegacyResponses = {
    /**
     * Successful Response
     */
    200: EvalSetResult;
};

export type EvaluationGetEvalResultLegacyResponse = EvaluationGetEvalResultLegacyResponses[keyof EvaluationGetEvalResultLegacyResponses];

export type EvaluationListEvalResultsData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval-results';
};

export type EvaluationListEvalResultsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationListEvalResultsError = EvaluationListEvalResultsErrors[keyof EvaluationListEvalResultsErrors];

export type EvaluationListEvalResultsResponses = {
    /**
     * Successful Response
     */
    200: ListEvalResultsResponse;
};

export type EvaluationListEvalResultsResponse = EvaluationListEvalResultsResponses[keyof EvaluationListEvalResultsResponses];

export type EvaluationListEvalResultsLegacyData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/eval_results';
};

export type EvaluationListEvalResultsLegacyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationListEvalResultsLegacyError = EvaluationListEvalResultsLegacyErrors[keyof EvaluationListEvalResultsLegacyErrors];

export type EvaluationListEvalResultsLegacyResponses = {
    /**
     * Response List Eval Results Legacy Apps  App Name  Eval Results Get
     * Successful Response
     */
    200: Array<string>;
};

export type EvaluationListEvalResultsLegacyResponse = EvaluationListEvalResultsLegacyResponses[keyof EvaluationListEvalResultsLegacyResponses];

export type EvaluationListMetricsInfoData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/metrics-info';
};

export type EvaluationListMetricsInfoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluationListMetricsInfoError = EvaluationListMetricsInfoErrors[keyof EvaluationListMetricsInfoErrors];

export type EvaluationListMetricsInfoResponses = {
    /**
     * Successful Response
     */
    200: ListMetricsInfoResponse;
};

export type EvaluationListMetricsInfoResponse = EvaluationListMetricsInfoResponses[keyof EvaluationListMetricsInfoResponses];

export type DeleteArtifactData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Artifact Name
         */
        artifact_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}';
};

export type DeleteArtifactErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteArtifactError = DeleteArtifactErrors[keyof DeleteArtifactErrors];

export type DeleteArtifactResponses = {
    /**
     * Response Delete Artifact Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Delete
     * Successful Response
     */
    200: null;
};

export type DeleteArtifactResponse = DeleteArtifactResponses[keyof DeleteArtifactResponses];

export type LoadArtifactData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Artifact Name
         */
        artifact_name: string;
    };
    query?: {
        /**
         * Version
         */
        version?: number | null;
    };
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}';
};

export type LoadArtifactErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoadArtifactError = LoadArtifactErrors[keyof LoadArtifactErrors];

export type LoadArtifactResponses = {
    /**
     * Response Load Artifact Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Get
     * Successful Response
     */
    200: PartOutput | null;
};

export type LoadArtifactResponse = LoadArtifactResponses[keyof LoadArtifactResponses];

export type LoadArtifactVersionData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Artifact Name
         */
        artifact_name: string;
        /**
         * Version Id
         */
        version_id: number;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/versions/{version_id}';
};

export type LoadArtifactVersionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoadArtifactVersionError = LoadArtifactVersionErrors[keyof LoadArtifactVersionErrors];

export type LoadArtifactVersionResponses = {
    /**
     * Response Load Artifact Version Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Versions  Version Id  Get
     * Successful Response
     */
    200: PartOutput | null;
};

export type LoadArtifactVersionResponse = LoadArtifactVersionResponses[keyof LoadArtifactVersionResponses];

export type ListArtifactNamesData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts';
};

export type ListArtifactNamesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListArtifactNamesError = ListArtifactNamesErrors[keyof ListArtifactNamesErrors];

export type ListArtifactNamesResponses = {
    /**
     * Response List Artifact Names Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts Get
     * Successful Response
     */
    200: Array<string>;
};

export type ListArtifactNamesResponse = ListArtifactNamesResponses[keyof ListArtifactNamesResponses];

export type ListArtifactVersionsData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Artifact Name
         */
        artifact_name: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/versions';
};

export type ListArtifactVersionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListArtifactVersionsError = ListArtifactVersionsErrors[keyof ListArtifactVersionsErrors];

export type ListArtifactVersionsResponses = {
    /**
     * Response List Artifact Versions Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts  Artifact Name  Versions Get
     * Successful Response
     */
    200: Array<number>;
};

export type ListArtifactVersionsResponse = ListArtifactVersionsResponses[keyof ListArtifactVersionsResponses];

export type RunAgentData = {
    body: RunAgentRequest;
    path?: never;
    query?: never;
    url: '/run';
};

export type RunAgentErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunAgentError = RunAgentErrors[keyof RunAgentErrors];

export type RunAgentResponses = {
    /**
     * Response Run Agent Run Post
     * Successful Response
     */
    200: Array<EventOutput>;
};

export type RunAgentResponse = RunAgentResponses[keyof RunAgentResponses];

export type RunAgentSseData = {
    body: RunAgentRequest;
    path?: never;
    query?: never;
    url: '/run_sse';
};

export type RunAgentSseErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunAgentSseError = RunAgentSseErrors[keyof RunAgentSseErrors];

export type RunAgentSseResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DebugGetEventGraphData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Event Id
         */
        event_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/events/{event_id}/graph';
};

export type DebugGetEventGraphErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DebugGetEventGraphError = DebugGetEventGraphErrors[keyof DebugGetEventGraphErrors];

export type DebugGetEventGraphResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthenticationRegisterData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type AuthenticationRegisterErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthenticationRegisterError = AuthenticationRegisterErrors[keyof AuthenticationRegisterErrors];

export type AuthenticationRegisterResponses = {
    /**
     * Successful Response
     */
    201: AuthResponse;
};

export type AuthenticationRegisterResponse = AuthenticationRegisterResponses[keyof AuthenticationRegisterResponses];

export type AuthenticationLoginData = {
    body: UserLogin;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthenticationLoginErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AuthenticationLoginError = AuthenticationLoginErrors[keyof AuthenticationLoginErrors];

export type AuthenticationLoginResponses = {
    /**
     * Successful Response
     */
    200: AuthResponse;
};

export type AuthenticationLoginResponse = AuthenticationLoginResponses[keyof AuthenticationLoginResponses];

export type AuthenticationGetCurrentUserInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type AuthenticationGetCurrentUserInfoResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type AuthenticationGetCurrentUserInfoResponse = AuthenticationGetCurrentUserInfoResponses[keyof AuthenticationGetCurrentUserInfoResponses];

export type AuthenticationLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthenticationLogoutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthenticationAuthHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/health';
};

export type AuthenticationAuthHealthResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ArtifactsUploadFileData = {
    body: BodyUploadFileAppsAppNameUsersUserIdSessionsSessionIdUploadPost;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/upload';
};

export type ArtifactsUploadFileErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArtifactsUploadFileError = ArtifactsUploadFileErrors[keyof ArtifactsUploadFileErrors];

export type ArtifactsUploadFileResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ArtifactsGetArtifactsMetadataData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
    };
    query?: never;
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts-metadata';
};

export type ArtifactsGetArtifactsMetadataErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArtifactsGetArtifactsMetadataError = ArtifactsGetArtifactsMetadataErrors[keyof ArtifactsGetArtifactsMetadataErrors];

export type ArtifactsGetArtifactsMetadataResponses = {
    /**
     * Response Get Artifacts Metadata Apps  App Name  Users  User Id  Sessions  Session Id  Artifacts Metadata Get
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type ArtifactsGetArtifactsMetadataResponse = ArtifactsGetArtifactsMetadataResponses[keyof ArtifactsGetArtifactsMetadataResponses];

export type ArtifactsDownloadArtifactData = {
    body?: never;
    path: {
        /**
         * App Name
         */
        app_name: string;
        /**
         * User Id
         */
        user_id: string;
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Artifact Name
         */
        artifact_name: string;
    };
    query?: {
        /**
         * Version
         */
        version?: number | null;
    };
    url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/download';
};

export type ArtifactsDownloadArtifactErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArtifactsDownloadArtifactError = ArtifactsDownloadArtifactErrors[keyof ArtifactsDownloadArtifactErrors];

export type ArtifactsDownloadArtifactResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsGetToolOpenapiSpecData = {
    body?: never;
    path: {
        /**
         * Tool Name
         */
        tool_name: string;
    };
    query?: never;
    url: '/tools/{tool_name}/openapi.json';
};

export type ToolsGetToolOpenapiSpecErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsGetToolOpenapiSpecError = ToolsGetToolOpenapiSpecErrors[keyof ToolsGetToolOpenapiSpecErrors];

export type ToolsGetToolOpenapiSpecResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsApiProxyData = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/jsonplaceholder/{path}';
};

export type ToolsApiProxyErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsApiProxyError = ToolsApiProxyErrors[keyof ToolsApiProxyErrors];

export type ToolsApiProxyResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsApiProxy2Data = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/jsonplaceholder/{path}';
};

export type ToolsApiProxy2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsApiProxy2Error = ToolsApiProxy2Errors[keyof ToolsApiProxy2Errors];

export type ToolsApiProxy2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsApiProxy3Data = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/jsonplaceholder/{path}';
};

export type ToolsApiProxy3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsApiProxy3Error = ToolsApiProxy3Errors[keyof ToolsApiProxy3Errors];

export type ToolsApiProxy3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsApiProxy4Data = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/jsonplaceholder/{path}';
};

export type ToolsApiProxy4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsApiProxy4Error = ToolsApiProxy4Errors[keyof ToolsApiProxy4Errors];

export type ToolsApiProxy4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsApiProxy5Data = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/jsonplaceholder/{path}';
};

export type ToolsApiProxy5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsApiProxy5Error = ToolsApiProxy5Errors[keyof ToolsApiProxy5Errors];

export type ToolsApiProxy5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsCustomToolData = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/calculator/{path}';
};

export type ToolsCustomToolErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsCustomToolError = ToolsCustomToolErrors[keyof ToolsCustomToolErrors];

export type ToolsCustomToolResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsCustomTool2Data = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/calculator/{path}';
};

export type ToolsCustomTool2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsCustomTool2Error = ToolsCustomTool2Errors[keyof ToolsCustomTool2Errors];

export type ToolsCustomTool2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ToolsCustomTool3Data = {
    body?: never;
    path: {
        /**
         * Path
         */
        path: string;
    };
    query?: never;
    url: '/tools/system_info/{path}';
};

export type ToolsCustomTool3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToolsCustomTool3Error = ToolsCustomTool3Errors[keyof ToolsCustomTool3Errors];

export type ToolsCustomTool3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetInfoInfoGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/info';
};

export type GetInfoInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};