// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ListAppsData, ListAppsResponses, DebugGetTraceDictData, DebugGetTraceDictResponses, DebugGetTraceDictErrors, DebugGetSessionTraceData, DebugGetSessionTraceResponses, DebugGetSessionTraceErrors, DeleteSessionData, DeleteSessionResponses, DeleteSessionErrors, GetSessionData, GetSessionResponses, GetSessionErrors, CreateSessionWithIdData, CreateSessionWithIdResponses, CreateSessionWithIdErrors, ListSessionsData, ListSessionsResponses, ListSessionsErrors, CreateSessionData, CreateSessionResponses, CreateSessionErrors, EvaluationListEvalSetsData, EvaluationListEvalSetsResponses, EvaluationListEvalSetsErrors, EvaluationCreateEvalSetData, EvaluationCreateEvalSetResponses, EvaluationCreateEvalSetErrors, EvaluationCreateEvalSetLegacyData, EvaluationCreateEvalSetLegacyResponses, EvaluationCreateEvalSetLegacyErrors, EvaluationListEvalSetsLegacyData, EvaluationListEvalSetsLegacyResponses, EvaluationListEvalSetsLegacyErrors, EvaluationAddSessionToEvalSetData, EvaluationAddSessionToEvalSetResponses, EvaluationAddSessionToEvalSetErrors, EvaluationAddSessionToEvalSet2Data, EvaluationAddSessionToEvalSet2Responses, EvaluationAddSessionToEvalSet2Errors, EvaluationListEvalsInEvalSetData, EvaluationListEvalsInEvalSetResponses, EvaluationListEvalsInEvalSetErrors, EvaluationDeleteEvalData, EvaluationDeleteEvalResponses, EvaluationDeleteEvalErrors, EvaluationGetEvalData, EvaluationGetEvalResponses, EvaluationGetEvalErrors, EvaluationUpdateEvalData, EvaluationUpdateEvalResponses, EvaluationUpdateEvalErrors, EvaluationDeleteEval2Data, EvaluationDeleteEval2Responses, EvaluationDeleteEval2Errors, EvaluationGetEval2Data, EvaluationGetEval2Responses, EvaluationGetEval2Errors, EvaluationUpdateEval2Data, EvaluationUpdateEval2Responses, EvaluationUpdateEval2Errors, EvaluationRunEvalLegacyData, EvaluationRunEvalLegacyResponses, EvaluationRunEvalLegacyErrors, EvaluationRunEvalData, EvaluationRunEvalResponses, EvaluationRunEvalErrors, EvaluationGetEvalResultData, EvaluationGetEvalResultResponses, EvaluationGetEvalResultErrors, EvaluationGetEvalResultLegacyData, EvaluationGetEvalResultLegacyResponses, EvaluationGetEvalResultLegacyErrors, EvaluationListEvalResultsData, EvaluationListEvalResultsResponses, EvaluationListEvalResultsErrors, EvaluationListEvalResultsLegacyData, EvaluationListEvalResultsLegacyResponses, EvaluationListEvalResultsLegacyErrors, EvaluationListMetricsInfoData, EvaluationListMetricsInfoResponses, EvaluationListMetricsInfoErrors, DeleteArtifactData, DeleteArtifactResponses, DeleteArtifactErrors, LoadArtifactData, LoadArtifactResponses, LoadArtifactErrors, LoadArtifactVersionData, LoadArtifactVersionResponses, LoadArtifactVersionErrors, ListArtifactNamesData, ListArtifactNamesResponses, ListArtifactNamesErrors, ListArtifactVersionsData, ListArtifactVersionsResponses, ListArtifactVersionsErrors, RunAgentData, RunAgentResponses, RunAgentErrors, RunAgentSseData, RunAgentSseResponses, RunAgentSseErrors, DebugGetEventGraphData, DebugGetEventGraphResponses, DebugGetEventGraphErrors, AuthenticationRegisterData, AuthenticationRegisterResponses, AuthenticationRegisterErrors, AuthenticationLoginData, AuthenticationLoginResponses, AuthenticationLoginErrors, AuthenticationGetCurrentUserInfoData, AuthenticationGetCurrentUserInfoResponses, AuthenticationLogoutData, AuthenticationLogoutResponses, AuthenticationAuthHealthData, AuthenticationAuthHealthResponses, ArtifactsUploadFileData, ArtifactsUploadFileResponses, ArtifactsUploadFileErrors, ArtifactsGetArtifactsMetadataData, ArtifactsGetArtifactsMetadataResponses, ArtifactsGetArtifactsMetadataErrors, ArtifactsDownloadArtifactData, ArtifactsDownloadArtifactResponses, ArtifactsDownloadArtifactErrors, ToolsGetToolOpenapiSpecData, ToolsGetToolOpenapiSpecResponses, ToolsGetToolOpenapiSpecErrors, ToolsApiProxyData, ToolsApiProxyResponses, ToolsApiProxyErrors, ToolsApiProxy2Data, ToolsApiProxy2Responses, ToolsApiProxy2Errors, ToolsApiProxy3Data, ToolsApiProxy3Responses, ToolsApiProxy3Errors, ToolsApiProxy4Data, ToolsApiProxy4Responses, ToolsApiProxy4Errors, ToolsApiProxy5Data, ToolsApiProxy5Responses, ToolsApiProxy5Errors, ToolsCustomToolData, ToolsCustomToolResponses, ToolsCustomToolErrors, ToolsCustomTool2Data, ToolsCustomTool2Responses, ToolsCustomTool2Errors, ToolsCustomTool3Data, ToolsCustomTool3Responses, ToolsCustomTool3Errors, HealthCheckHealthGetData, HealthCheckHealthGetResponses, GetInfoInfoGetData, GetInfoInfoGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Apps
 */
export const listApps = <ThrowOnError extends boolean = false>(options?: Options<ListAppsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAppsResponses, unknown, ThrowOnError>({
        url: '/list-apps',
        ...options
    });
};

/**
 * Get Trace Dict
 */
export const debugGetTraceDict = <ThrowOnError extends boolean = false>(options: Options<DebugGetTraceDictData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DebugGetTraceDictResponses, DebugGetTraceDictErrors, ThrowOnError>({
        url: '/debug/trace/{event_id}',
        ...options
    });
};

/**
 * Get Session Trace
 */
export const debugGetSessionTrace = <ThrowOnError extends boolean = false>(options: Options<DebugGetSessionTraceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DebugGetSessionTraceResponses, DebugGetSessionTraceErrors, ThrowOnError>({
        url: '/debug/trace/session/{session_id}',
        ...options
    });
};

/**
 * Delete Session
 */
export const deleteSession = <ThrowOnError extends boolean = false>(options: Options<DeleteSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSessionResponses, DeleteSessionErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}',
        ...options
    });
};

/**
 * Get Session
 */
export const getSession = <ThrowOnError extends boolean = false>(options: Options<GetSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionResponses, GetSessionErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}',
        ...options
    });
};

/**
 * Create Session With Id
 */
export const createSessionWithId = <ThrowOnError extends boolean = false>(options: Options<CreateSessionWithIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSessionWithIdResponses, CreateSessionWithIdErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Sessions
 */
export const listSessions = <ThrowOnError extends boolean = false>(options: Options<ListSessionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSessionsResponses, ListSessionsErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions',
        ...options
    });
};

/**
 * Create Session
 */
export const createSession = <ThrowOnError extends boolean = false>(options: Options<CreateSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSessionResponses, CreateSessionErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Eval Sets
 * Lists all eval sets for the given app.
 */
export const evaluationListEvalSets = <ThrowOnError extends boolean = false>(options: Options<EvaluationListEvalSetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationListEvalSetsResponses, EvaluationListEvalSetsErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets',
        ...options
    });
};

/**
 * Create Eval Set
 */
export const evaluationCreateEvalSet = <ThrowOnError extends boolean = false>(options: Options<EvaluationCreateEvalSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationCreateEvalSetResponses, EvaluationCreateEvalSetErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Eval Set Legacy
 * Creates an eval set, given the id.
 */
export const evaluationCreateEvalSetLegacy = <ThrowOnError extends boolean = false>(options: Options<EvaluationCreateEvalSetLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationCreateEvalSetLegacyResponses, EvaluationCreateEvalSetLegacyErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}',
        ...options
    });
};

/**
 * List Eval Sets Legacy
 */
export const evaluationListEvalSetsLegacy = <ThrowOnError extends boolean = false>(options: Options<EvaluationListEvalSetsLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationListEvalSetsLegacyResponses, EvaluationListEvalSetsLegacyErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets',
        ...options
    });
};

/**
 * Add Session To Eval Set
 */
export const evaluationAddSessionToEvalSet = <ThrowOnError extends boolean = false>(options: Options<EvaluationAddSessionToEvalSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationAddSessionToEvalSetResponses, EvaluationAddSessionToEvalSetErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}/add_session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Session To Eval Set
 */
export const evaluationAddSessionToEvalSet2 = <ThrowOnError extends boolean = false>(options: Options<EvaluationAddSessionToEvalSet2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationAddSessionToEvalSet2Responses, EvaluationAddSessionToEvalSet2Errors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets/{eval_set_id}/add-session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Evals In Eval Set
 * Lists all evals in an eval set.
 */
export const evaluationListEvalsInEvalSet = <ThrowOnError extends boolean = false>(options: Options<EvaluationListEvalsInEvalSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationListEvalsInEvalSetResponses, EvaluationListEvalsInEvalSetErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals',
        ...options
    });
};

/**
 * Delete Eval
 */
export const evaluationDeleteEval = <ThrowOnError extends boolean = false>(options: Options<EvaluationDeleteEvalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EvaluationDeleteEvalResponses, EvaluationDeleteEvalErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}',
        ...options
    });
};

/**
 * Get Eval
 * Gets an eval case in an eval set.
 */
export const evaluationGetEval = <ThrowOnError extends boolean = false>(options: Options<EvaluationGetEvalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationGetEvalResponses, EvaluationGetEvalErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}',
        ...options
    });
};

/**
 * Update Eval
 */
export const evaluationUpdateEval = <ThrowOnError extends boolean = false>(options: Options<EvaluationUpdateEvalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EvaluationUpdateEvalResponses, EvaluationUpdateEvalErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}/evals/{eval_case_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Eval
 */
export const evaluationDeleteEval2 = <ThrowOnError extends boolean = false>(options: Options<EvaluationDeleteEval2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EvaluationDeleteEval2Responses, EvaluationDeleteEval2Errors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets/{eval_set_id}/eval-cases/{eval_case_id}',
        ...options
    });
};

/**
 * Get Eval
 * Gets an eval case in an eval set.
 */
export const evaluationGetEval2 = <ThrowOnError extends boolean = false>(options: Options<EvaluationGetEval2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationGetEval2Responses, EvaluationGetEval2Errors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets/{eval_set_id}/eval-cases/{eval_case_id}',
        ...options
    });
};

/**
 * Update Eval
 */
export const evaluationUpdateEval2 = <ThrowOnError extends boolean = false>(options: Options<EvaluationUpdateEval2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EvaluationUpdateEval2Responses, EvaluationUpdateEval2Errors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets/{eval_set_id}/eval-cases/{eval_case_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Run Eval Legacy
 */
export const evaluationRunEvalLegacy = <ThrowOnError extends boolean = false>(options: Options<EvaluationRunEvalLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationRunEvalLegacyResponses, EvaluationRunEvalLegacyErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_sets/{eval_set_id}/run_eval',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Run Eval
 * Runs an eval given the details in the eval request.
 */
export const evaluationRunEval = <ThrowOnError extends boolean = false>(options: Options<EvaluationRunEvalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationRunEvalResponses, EvaluationRunEvalErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval-sets/{eval_set_id}/run',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Eval Result
 * Gets the eval result for the given eval id.
 */
export const evaluationGetEvalResult = <ThrowOnError extends boolean = false>(options: Options<EvaluationGetEvalResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationGetEvalResultResponses, EvaluationGetEvalResultErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval-results/{eval_result_id}',
        ...options
    });
};

/**
 * Get Eval Result Legacy
 */
export const evaluationGetEvalResultLegacy = <ThrowOnError extends boolean = false>(options: Options<EvaluationGetEvalResultLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationGetEvalResultLegacyResponses, EvaluationGetEvalResultLegacyErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_results/{eval_result_id}',
        ...options
    });
};

/**
 * List Eval Results
 * Lists all eval results for the given app.
 */
export const evaluationListEvalResults = <ThrowOnError extends boolean = false>(options: Options<EvaluationListEvalResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationListEvalResultsResponses, EvaluationListEvalResultsErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval-results',
        ...options
    });
};

/**
 * List Eval Results Legacy
 */
export const evaluationListEvalResultsLegacy = <ThrowOnError extends boolean = false>(options: Options<EvaluationListEvalResultsLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationListEvalResultsLegacyResponses, EvaluationListEvalResultsLegacyErrors, ThrowOnError>({
        url: '/apps/{app_name}/eval_results',
        ...options
    });
};

/**
 * List Metrics Info
 * Lists all eval metrics for the given app.
 */
export const evaluationListMetricsInfo = <ThrowOnError extends boolean = false>(options: Options<EvaluationListMetricsInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationListMetricsInfoResponses, EvaluationListMetricsInfoErrors, ThrowOnError>({
        url: '/apps/{app_name}/metrics-info',
        ...options
    });
};

/**
 * Delete Artifact
 */
export const deleteArtifact = <ThrowOnError extends boolean = false>(options: Options<DeleteArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteArtifactResponses, DeleteArtifactErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}',
        ...options
    });
};

/**
 * Load Artifact
 */
export const loadArtifact = <ThrowOnError extends boolean = false>(options: Options<LoadArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LoadArtifactResponses, LoadArtifactErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}',
        ...options
    });
};

/**
 * Load Artifact Version
 */
export const loadArtifactVersion = <ThrowOnError extends boolean = false>(options: Options<LoadArtifactVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LoadArtifactVersionResponses, LoadArtifactVersionErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/versions/{version_id}',
        ...options
    });
};

/**
 * List Artifact Names
 */
export const listArtifactNames = <ThrowOnError extends boolean = false>(options: Options<ListArtifactNamesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListArtifactNamesResponses, ListArtifactNamesErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts',
        ...options
    });
};

/**
 * List Artifact Versions
 */
export const listArtifactVersions = <ThrowOnError extends boolean = false>(options: Options<ListArtifactVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListArtifactVersionsResponses, ListArtifactVersionsErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/versions',
        ...options
    });
};

/**
 * Run Agent
 */
export const runAgent = <ThrowOnError extends boolean = false>(options: Options<RunAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunAgentResponses, RunAgentErrors, ThrowOnError>({
        url: '/run',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Run Agent Sse
 */
export const runAgentSse = <ThrowOnError extends boolean = false>(options: Options<RunAgentSseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunAgentSseResponses, RunAgentSseErrors, ThrowOnError>({
        url: '/run_sse',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Event Graph
 */
export const debugGetEventGraph = <ThrowOnError extends boolean = false>(options: Options<DebugGetEventGraphData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DebugGetEventGraphResponses, DebugGetEventGraphErrors, ThrowOnError>({
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/events/{event_id}/graph',
        ...options
    });
};

/**
 * Register
 * Register a new user account.
 *
 * - **email**: Valid email address (must be unique)
 * - **username**: Username (3-50 characters, must be unique)
 * - **password**: Password (6-100 characters)
 *
 * Returns JWT access token and user information.
 */
export const authenticationRegister = <ThrowOnError extends boolean = false>(options: Options<AuthenticationRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticationRegisterResponses, AuthenticationRegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 * Authenticate user and return access token.
 *
 * - **email_or_username**: Email address or username
 * - **password**: User's password
 *
 * Returns JWT access token and user information.
 */
export const authenticationLogin = <ThrowOnError extends boolean = false>(options: Options<AuthenticationLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticationLoginResponses, AuthenticationLoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Current User Info
 * Get current authenticated user's information.
 *
 * Requires valid JWT token in Authorization header.
 */
export const authenticationGetCurrentUserInfo = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationGetCurrentUserInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthenticationGetCurrentUserInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

/**
 * Logout
 * Logout endpoint (for consistency with frontend).
 *
 * Since we're using JWTs, logout is handled client-side by removing the token.
 * This endpoint exists for API completeness and future extensions
 * (like token blacklisting if needed).
 */
export const authenticationLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthenticationLogoutResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Auth Health
 * Health check endpoint for auth service
 */
export const authenticationAuthHealth = <ThrowOnError extends boolean = false>(options?: Options<AuthenticationAuthHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthenticationAuthHealthResponses, unknown, ThrowOnError>({
        url: '/auth/health',
        ...options
    });
};

/**
 * Upload File
 * Upload a file as an artifact to the session or user namespace.
 *
 * Args:
 * app_name: Application name
 * user_id: User identifier
 * session_id: Session identifier
 * request: FastAPI request object (for accessing app state)
 * file: Uploaded file
 * namespace: Either 'session' or 'user' (default: 'session')
 * custom_filename: Optional custom filename (default: use original filename)
 * current_user: Current authenticated user (from JWT)
 *
 * Returns:
 * Dict with upload success details including filename and version
 */
export const artifactsUploadFile = <ThrowOnError extends boolean = false>(options: Options<ArtifactsUploadFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ArtifactsUploadFileResponses, ArtifactsUploadFileErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Artifacts Metadata
 * Get detailed metadata for all artifacts in a session.
 *
 * Args:
 * app_name: Application name
 * user_id: User identifier
 * session_id: Session identifier
 * request: FastAPI request object (for accessing app state)
 * current_user: Current authenticated user (from JWT)
 *
 * Returns:
 * List of artifact metadata dictionaries
 */
export const artifactsGetArtifactsMetadata = <ThrowOnError extends boolean = false>(options: Options<ArtifactsGetArtifactsMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ArtifactsGetArtifactsMetadataResponses, ArtifactsGetArtifactsMetadataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts-metadata',
        ...options
    });
};

/**
 * Download Artifact
 * Download an artifact file with proper headers for browser download.
 *
 * Args:
 * app_name: Application name
 * user_id: User identifier
 * session_id: Session identifier
 * artifact_name: Artifact filename
 * request: FastAPI request object (for accessing app state)
 * version: Specific version (optional, defaults to latest)
 * current_user: Current authenticated user (from JWT)
 *
 * Returns:
 * StreamingResponse with file content and proper headers
 */
export const artifactsDownloadArtifact = <ThrowOnError extends boolean = false>(options: Options<ArtifactsDownloadArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ArtifactsDownloadArtifactResponses, ArtifactsDownloadArtifactErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{app_name}/users/{user_id}/sessions/{session_id}/artifacts/{artifact_name}/download',
        ...options
    });
};

/**
 * Get OpenAPI spec for individual tool
 * Returns the OpenAPI specification for a specific registered tool
 */
export const toolsGetToolOpenapiSpec = <ThrowOnError extends boolean = false>(options: Options<ToolsGetToolOpenapiSpecData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsGetToolOpenapiSpecResponses, ToolsGetToolOpenapiSpecErrors, ThrowOnError>({
        url: '/tools/{tool_name}/openapi.json',
        ...options
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy = <ThrowOnError extends boolean = false>(options: Options<ToolsApiProxyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ToolsApiProxyResponses, ToolsApiProxyErrors, ThrowOnError>({
        url: '/tools/jsonplaceholder/{path}',
        ...options
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy2 = <ThrowOnError extends boolean = false>(options: Options<ToolsApiProxy2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsApiProxy2Responses, ToolsApiProxy2Errors, ThrowOnError>({
        url: '/tools/jsonplaceholder/{path}',
        ...options
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy3 = <ThrowOnError extends boolean = false>(options: Options<ToolsApiProxy3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ToolsApiProxy3Responses, ToolsApiProxy3Errors, ThrowOnError>({
        url: '/tools/jsonplaceholder/{path}',
        ...options
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy4 = <ThrowOnError extends boolean = false>(options: Options<ToolsApiProxy4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToolsApiProxy4Responses, ToolsApiProxy4Errors, ThrowOnError>({
        url: '/tools/jsonplaceholder/{path}',
        ...options
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy5 = <ThrowOnError extends boolean = false>(options: Options<ToolsApiProxy5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ToolsApiProxy5Responses, ToolsApiProxy5Errors, ThrowOnError>({
        url: '/tools/jsonplaceholder/{path}',
        ...options
    });
};

/**
 * Calculator Custom Tool
 * Custom tool endpoint: calculator
 */
export const toolsCustomTool = <ThrowOnError extends boolean = false>(options: Options<ToolsCustomToolData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsCustomToolResponses, ToolsCustomToolErrors, ThrowOnError>({
        url: '/tools/calculator/{path}',
        ...options
    });
};

/**
 * Calculator Custom Tool
 * Custom tool endpoint: calculator
 */
export const toolsCustomTool2 = <ThrowOnError extends boolean = false>(options: Options<ToolsCustomTool2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToolsCustomTool2Responses, ToolsCustomTool2Errors, ThrowOnError>({
        url: '/tools/calculator/{path}',
        ...options
    });
};

/**
 * System_Info Custom Tool
 * Custom tool endpoint: system_info
 */
export const toolsCustomTool3 = <ThrowOnError extends boolean = false>(options: Options<ToolsCustomTool3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsCustomTool3Responses, ToolsCustomTool3Errors, ThrowOnError>({
        url: '/tools/system_info/{path}',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get Info
 * Get information about the service
 */
export const getInfoInfoGet = <ThrowOnError extends boolean = false>(options?: Options<GetInfoInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetInfoInfoGetResponses, unknown, ThrowOnError>({
        url: '/info',
        ...options
    });
};