// This file is auto-generated by @hey-api/openapi-ts

import { type Options, listApps, debugGetTraceDict, debugGetSessionTrace, deleteSession, getSession, createSessionWithId, listSessions, createSession, evaluationListEvalSets, evaluationCreateEvalSet, evaluationCreateEvalSetLegacy, evaluationListEvalSetsLegacy, evaluationAddSessionToEvalSet, evaluationAddSessionToEvalSet2, evaluationListEvalsInEvalSet, evaluationDeleteEval, evaluationGetEval, evaluationUpdateEval, evaluationDeleteEval2, evaluationGetEval2, evaluationUpdateEval2, evaluationRunEvalLegacy, evaluationRunEval, evaluationGetEvalResult, evaluationGetEvalResultLegacy, evaluationListEvalResults, evaluationListEvalResultsLegacy, evaluationListMetricsInfo, deleteArtifact, loadArtifact, loadArtifactVersion, listArtifactNames, listArtifactVersions, runAgent, runAgentSse, debugGetEventGraph, authenticationRegister, authenticationLogin, authenticationGetCurrentUserInfo, authenticationLogout, authenticationAuthHealth, artifactsUploadFile, artifactsGetArtifactsMetadata, artifactsDownloadArtifact, toolsGetToolOpenapiSpec, toolsApiProxy, toolsApiProxy2, toolsApiProxy3, toolsApiProxy4, toolsApiProxy5, toolsCustomTool, toolsCustomTool2, toolsCustomTool3, healthCheckHealthGet, getInfoInfoGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { ListAppsData, DebugGetTraceDictData, DebugGetSessionTraceData, DeleteSessionData, DeleteSessionError, DeleteSessionResponse, GetSessionData, CreateSessionWithIdData, CreateSessionWithIdError, CreateSessionWithIdResponse, ListSessionsData, CreateSessionData, CreateSessionError, CreateSessionResponse, EvaluationListEvalSetsData, EvaluationCreateEvalSetData, EvaluationCreateEvalSetError, EvaluationCreateEvalSetResponse, EvaluationCreateEvalSetLegacyData, EvaluationCreateEvalSetLegacyError, EvaluationListEvalSetsLegacyData, EvaluationAddSessionToEvalSetData, EvaluationAddSessionToEvalSetError, EvaluationAddSessionToEvalSet2Data, EvaluationAddSessionToEvalSet2Error, EvaluationListEvalsInEvalSetData, EvaluationDeleteEvalData, EvaluationDeleteEvalError, EvaluationDeleteEvalResponse, EvaluationGetEvalData, EvaluationUpdateEvalData, EvaluationUpdateEvalError, EvaluationDeleteEval2Data, EvaluationDeleteEval2Error, EvaluationDeleteEval2Response, EvaluationGetEval2Data, EvaluationUpdateEval2Data, EvaluationUpdateEval2Error, EvaluationRunEvalLegacyData, EvaluationRunEvalLegacyError, EvaluationRunEvalLegacyResponse, EvaluationRunEvalData, EvaluationRunEvalError, EvaluationRunEvalResponse, EvaluationGetEvalResultData, EvaluationGetEvalResultLegacyData, EvaluationListEvalResultsData, EvaluationListEvalResultsLegacyData, EvaluationListMetricsInfoData, DeleteArtifactData, DeleteArtifactError, DeleteArtifactResponse, LoadArtifactData, LoadArtifactVersionData, ListArtifactNamesData, ListArtifactVersionsData, RunAgentData, RunAgentError, RunAgentResponse, RunAgentSseData, RunAgentSseError, DebugGetEventGraphData, AuthenticationRegisterData, AuthenticationRegisterError, AuthenticationRegisterResponse, AuthenticationLoginData, AuthenticationLoginError, AuthenticationLoginResponse, AuthenticationGetCurrentUserInfoData, AuthenticationLogoutData, AuthenticationAuthHealthData, ArtifactsUploadFileData, ArtifactsUploadFileError, ArtifactsGetArtifactsMetadataData, ArtifactsDownloadArtifactData, ToolsGetToolOpenapiSpecData, ToolsApiProxyData, ToolsApiProxyError, ToolsApiProxy2Data, ToolsApiProxy3Data, ToolsApiProxy3Error, ToolsApiProxy4Data, ToolsApiProxy4Error, ToolsApiProxy5Data, ToolsApiProxy5Error, ToolsCustomToolData, ToolsCustomTool2Data, ToolsCustomTool2Error, ToolsCustomTool3Data, HealthCheckHealthGetData, GetInfoInfoGetData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const listAppsQueryKey = (options?: Options<ListAppsData>) => createQueryKey('listApps', options);

/**
 * List Apps
 */
export const listAppsOptions = (options?: Options<ListAppsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listApps({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAppsQueryKey(options)
    });
};

export const debugGetTraceDictQueryKey = (options: Options<DebugGetTraceDictData>) => createQueryKey('debugGetTraceDict', options);

/**
 * Get Trace Dict
 */
export const debugGetTraceDictOptions = (options: Options<DebugGetTraceDictData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await debugGetTraceDict({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: debugGetTraceDictQueryKey(options)
    });
};

export const debugGetSessionTraceQueryKey = (options: Options<DebugGetSessionTraceData>) => createQueryKey('debugGetSessionTrace', options);

/**
 * Get Session Trace
 */
export const debugGetSessionTraceOptions = (options: Options<DebugGetSessionTraceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await debugGetSessionTrace({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: debugGetSessionTraceQueryKey(options)
    });
};

/**
 * Delete Session
 */
export const deleteSessionMutation = (options?: Partial<Options<DeleteSessionData>>): UseMutationOptions<DeleteSessionResponse, DeleteSessionError, Options<DeleteSessionData>> => {
    const mutationOptions: UseMutationOptions<DeleteSessionResponse, DeleteSessionError, Options<DeleteSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSessionQueryKey = (options: Options<GetSessionData>) => createQueryKey('getSession', options);

/**
 * Get Session
 */
export const getSessionOptions = (options: Options<GetSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSessionQueryKey(options)
    });
};

/**
 * Create Session With Id
 */
export const createSessionWithIdMutation = (options?: Partial<Options<CreateSessionWithIdData>>): UseMutationOptions<CreateSessionWithIdResponse, CreateSessionWithIdError, Options<CreateSessionWithIdData>> => {
    const mutationOptions: UseMutationOptions<CreateSessionWithIdResponse, CreateSessionWithIdError, Options<CreateSessionWithIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSessionWithId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSessionsQueryKey = (options: Options<ListSessionsData>) => createQueryKey('listSessions', options);

/**
 * List Sessions
 */
export const listSessionsOptions = (options: Options<ListSessionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSessions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSessionsQueryKey(options)
    });
};

/**
 * Create Session
 */
export const createSessionMutation = (options?: Partial<Options<CreateSessionData>>): UseMutationOptions<CreateSessionResponse, CreateSessionError, Options<CreateSessionData>> => {
    const mutationOptions: UseMutationOptions<CreateSessionResponse, CreateSessionError, Options<CreateSessionData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSession({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const evaluationListEvalSetsQueryKey = (options: Options<EvaluationListEvalSetsData>) => createQueryKey('evaluationListEvalSets', options);

/**
 * List Eval Sets
 * Lists all eval sets for the given app.
 */
export const evaluationListEvalSetsOptions = (options: Options<EvaluationListEvalSetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationListEvalSets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationListEvalSetsQueryKey(options)
    });
};

/**
 * Create Eval Set
 */
export const evaluationCreateEvalSetMutation = (options?: Partial<Options<EvaluationCreateEvalSetData>>): UseMutationOptions<EvaluationCreateEvalSetResponse, EvaluationCreateEvalSetError, Options<EvaluationCreateEvalSetData>> => {
    const mutationOptions: UseMutationOptions<EvaluationCreateEvalSetResponse, EvaluationCreateEvalSetError, Options<EvaluationCreateEvalSetData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationCreateEvalSet({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create Eval Set Legacy
 * Creates an eval set, given the id.
 */
export const evaluationCreateEvalSetLegacyMutation = (options?: Partial<Options<EvaluationCreateEvalSetLegacyData>>): UseMutationOptions<unknown, EvaluationCreateEvalSetLegacyError, Options<EvaluationCreateEvalSetLegacyData>> => {
    const mutationOptions: UseMutationOptions<unknown, EvaluationCreateEvalSetLegacyError, Options<EvaluationCreateEvalSetLegacyData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationCreateEvalSetLegacy({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const evaluationListEvalSetsLegacyQueryKey = (options: Options<EvaluationListEvalSetsLegacyData>) => createQueryKey('evaluationListEvalSetsLegacy', options);

/**
 * List Eval Sets Legacy
 */
export const evaluationListEvalSetsLegacyOptions = (options: Options<EvaluationListEvalSetsLegacyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationListEvalSetsLegacy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationListEvalSetsLegacyQueryKey(options)
    });
};

/**
 * Add Session To Eval Set
 */
export const evaluationAddSessionToEvalSetMutation = (options?: Partial<Options<EvaluationAddSessionToEvalSetData>>): UseMutationOptions<unknown, EvaluationAddSessionToEvalSetError, Options<EvaluationAddSessionToEvalSetData>> => {
    const mutationOptions: UseMutationOptions<unknown, EvaluationAddSessionToEvalSetError, Options<EvaluationAddSessionToEvalSetData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationAddSessionToEvalSet({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Add Session To Eval Set
 */
export const evaluationAddSessionToEvalSet2Mutation = (options?: Partial<Options<EvaluationAddSessionToEvalSet2Data>>): UseMutationOptions<unknown, EvaluationAddSessionToEvalSet2Error, Options<EvaluationAddSessionToEvalSet2Data>> => {
    const mutationOptions: UseMutationOptions<unknown, EvaluationAddSessionToEvalSet2Error, Options<EvaluationAddSessionToEvalSet2Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationAddSessionToEvalSet2({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const evaluationListEvalsInEvalSetQueryKey = (options: Options<EvaluationListEvalsInEvalSetData>) => createQueryKey('evaluationListEvalsInEvalSet', options);

/**
 * List Evals In Eval Set
 * Lists all evals in an eval set.
 */
export const evaluationListEvalsInEvalSetOptions = (options: Options<EvaluationListEvalsInEvalSetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationListEvalsInEvalSet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationListEvalsInEvalSetQueryKey(options)
    });
};

/**
 * Delete Eval
 */
export const evaluationDeleteEvalMutation = (options?: Partial<Options<EvaluationDeleteEvalData>>): UseMutationOptions<EvaluationDeleteEvalResponse, EvaluationDeleteEvalError, Options<EvaluationDeleteEvalData>> => {
    const mutationOptions: UseMutationOptions<EvaluationDeleteEvalResponse, EvaluationDeleteEvalError, Options<EvaluationDeleteEvalData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationDeleteEval({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const evaluationGetEvalQueryKey = (options: Options<EvaluationGetEvalData>) => createQueryKey('evaluationGetEval', options);

/**
 * Get Eval
 * Gets an eval case in an eval set.
 */
export const evaluationGetEvalOptions = (options: Options<EvaluationGetEvalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationGetEval({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationGetEvalQueryKey(options)
    });
};

/**
 * Update Eval
 */
export const evaluationUpdateEvalMutation = (options?: Partial<Options<EvaluationUpdateEvalData>>): UseMutationOptions<unknown, EvaluationUpdateEvalError, Options<EvaluationUpdateEvalData>> => {
    const mutationOptions: UseMutationOptions<unknown, EvaluationUpdateEvalError, Options<EvaluationUpdateEvalData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationUpdateEval({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Eval
 */
export const evaluationDeleteEval2Mutation = (options?: Partial<Options<EvaluationDeleteEval2Data>>): UseMutationOptions<EvaluationDeleteEval2Response, EvaluationDeleteEval2Error, Options<EvaluationDeleteEval2Data>> => {
    const mutationOptions: UseMutationOptions<EvaluationDeleteEval2Response, EvaluationDeleteEval2Error, Options<EvaluationDeleteEval2Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationDeleteEval2({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const evaluationGetEval2QueryKey = (options: Options<EvaluationGetEval2Data>) => createQueryKey('evaluationGetEval2', options);

/**
 * Get Eval
 * Gets an eval case in an eval set.
 */
export const evaluationGetEval2Options = (options: Options<EvaluationGetEval2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationGetEval2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationGetEval2QueryKey(options)
    });
};

/**
 * Update Eval
 */
export const evaluationUpdateEval2Mutation = (options?: Partial<Options<EvaluationUpdateEval2Data>>): UseMutationOptions<unknown, EvaluationUpdateEval2Error, Options<EvaluationUpdateEval2Data>> => {
    const mutationOptions: UseMutationOptions<unknown, EvaluationUpdateEval2Error, Options<EvaluationUpdateEval2Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationUpdateEval2({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Run Eval Legacy
 */
export const evaluationRunEvalLegacyMutation = (options?: Partial<Options<EvaluationRunEvalLegacyData>>): UseMutationOptions<EvaluationRunEvalLegacyResponse, EvaluationRunEvalLegacyError, Options<EvaluationRunEvalLegacyData>> => {
    const mutationOptions: UseMutationOptions<EvaluationRunEvalLegacyResponse, EvaluationRunEvalLegacyError, Options<EvaluationRunEvalLegacyData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationRunEvalLegacy({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Run Eval
 * Runs an eval given the details in the eval request.
 */
export const evaluationRunEvalMutation = (options?: Partial<Options<EvaluationRunEvalData>>): UseMutationOptions<EvaluationRunEvalResponse, EvaluationRunEvalError, Options<EvaluationRunEvalData>> => {
    const mutationOptions: UseMutationOptions<EvaluationRunEvalResponse, EvaluationRunEvalError, Options<EvaluationRunEvalData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await evaluationRunEval({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const evaluationGetEvalResultQueryKey = (options: Options<EvaluationGetEvalResultData>) => createQueryKey('evaluationGetEvalResult', options);

/**
 * Get Eval Result
 * Gets the eval result for the given eval id.
 */
export const evaluationGetEvalResultOptions = (options: Options<EvaluationGetEvalResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationGetEvalResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationGetEvalResultQueryKey(options)
    });
};

export const evaluationGetEvalResultLegacyQueryKey = (options: Options<EvaluationGetEvalResultLegacyData>) => createQueryKey('evaluationGetEvalResultLegacy', options);

/**
 * Get Eval Result Legacy
 */
export const evaluationGetEvalResultLegacyOptions = (options: Options<EvaluationGetEvalResultLegacyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationGetEvalResultLegacy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationGetEvalResultLegacyQueryKey(options)
    });
};

export const evaluationListEvalResultsQueryKey = (options: Options<EvaluationListEvalResultsData>) => createQueryKey('evaluationListEvalResults', options);

/**
 * List Eval Results
 * Lists all eval results for the given app.
 */
export const evaluationListEvalResultsOptions = (options: Options<EvaluationListEvalResultsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationListEvalResults({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationListEvalResultsQueryKey(options)
    });
};

export const evaluationListEvalResultsLegacyQueryKey = (options: Options<EvaluationListEvalResultsLegacyData>) => createQueryKey('evaluationListEvalResultsLegacy', options);

/**
 * List Eval Results Legacy
 */
export const evaluationListEvalResultsLegacyOptions = (options: Options<EvaluationListEvalResultsLegacyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationListEvalResultsLegacy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationListEvalResultsLegacyQueryKey(options)
    });
};

export const evaluationListMetricsInfoQueryKey = (options: Options<EvaluationListMetricsInfoData>) => createQueryKey('evaluationListMetricsInfo', options);

/**
 * List Metrics Info
 * Lists all eval metrics for the given app.
 */
export const evaluationListMetricsInfoOptions = (options: Options<EvaluationListMetricsInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await evaluationListMetricsInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: evaluationListMetricsInfoQueryKey(options)
    });
};

/**
 * Delete Artifact
 */
export const deleteArtifactMutation = (options?: Partial<Options<DeleteArtifactData>>): UseMutationOptions<DeleteArtifactResponse, DeleteArtifactError, Options<DeleteArtifactData>> => {
    const mutationOptions: UseMutationOptions<DeleteArtifactResponse, DeleteArtifactError, Options<DeleteArtifactData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteArtifact({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadArtifactQueryKey = (options: Options<LoadArtifactData>) => createQueryKey('loadArtifact', options);

/**
 * Load Artifact
 */
export const loadArtifactOptions = (options: Options<LoadArtifactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadArtifact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadArtifactQueryKey(options)
    });
};

export const loadArtifactVersionQueryKey = (options: Options<LoadArtifactVersionData>) => createQueryKey('loadArtifactVersion', options);

/**
 * Load Artifact Version
 */
export const loadArtifactVersionOptions = (options: Options<LoadArtifactVersionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadArtifactVersion({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadArtifactVersionQueryKey(options)
    });
};

export const listArtifactNamesQueryKey = (options: Options<ListArtifactNamesData>) => createQueryKey('listArtifactNames', options);

/**
 * List Artifact Names
 */
export const listArtifactNamesOptions = (options: Options<ListArtifactNamesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listArtifactNames({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listArtifactNamesQueryKey(options)
    });
};

export const listArtifactVersionsQueryKey = (options: Options<ListArtifactVersionsData>) => createQueryKey('listArtifactVersions', options);

/**
 * List Artifact Versions
 */
export const listArtifactVersionsOptions = (options: Options<ListArtifactVersionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listArtifactVersions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listArtifactVersionsQueryKey(options)
    });
};

/**
 * Run Agent
 */
export const runAgentMutation = (options?: Partial<Options<RunAgentData>>): UseMutationOptions<RunAgentResponse, RunAgentError, Options<RunAgentData>> => {
    const mutationOptions: UseMutationOptions<RunAgentResponse, RunAgentError, Options<RunAgentData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await runAgent({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Run Agent Sse
 */
export const runAgentSseMutation = (options?: Partial<Options<RunAgentSseData>>): UseMutationOptions<unknown, RunAgentSseError, Options<RunAgentSseData>> => {
    const mutationOptions: UseMutationOptions<unknown, RunAgentSseError, Options<RunAgentSseData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await runAgentSse({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const debugGetEventGraphQueryKey = (options: Options<DebugGetEventGraphData>) => createQueryKey('debugGetEventGraph', options);

/**
 * Get Event Graph
 */
export const debugGetEventGraphOptions = (options: Options<DebugGetEventGraphData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await debugGetEventGraph({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: debugGetEventGraphQueryKey(options)
    });
};

/**
 * Register
 * Register a new user account.
 *
 * - **email**: Valid email address (must be unique)
 * - **username**: Username (3-50 characters, must be unique)
 * - **password**: Password (6-100 characters)
 *
 * Returns JWT access token and user information.
 */
export const authenticationRegisterMutation = (options?: Partial<Options<AuthenticationRegisterData>>): UseMutationOptions<AuthenticationRegisterResponse, AuthenticationRegisterError, Options<AuthenticationRegisterData>> => {
    const mutationOptions: UseMutationOptions<AuthenticationRegisterResponse, AuthenticationRegisterError, Options<AuthenticationRegisterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authenticationRegister({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Login
 * Authenticate user and return access token.
 *
 * - **email_or_username**: Email address or username
 * - **password**: User's password
 *
 * Returns JWT access token and user information.
 */
export const authenticationLoginMutation = (options?: Partial<Options<AuthenticationLoginData>>): UseMutationOptions<AuthenticationLoginResponse, AuthenticationLoginError, Options<AuthenticationLoginData>> => {
    const mutationOptions: UseMutationOptions<AuthenticationLoginResponse, AuthenticationLoginError, Options<AuthenticationLoginData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authenticationLogin({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authenticationGetCurrentUserInfoQueryKey = (options?: Options<AuthenticationGetCurrentUserInfoData>) => createQueryKey('authenticationGetCurrentUserInfo', options);

/**
 * Get Current User Info
 * Get current authenticated user's information.
 *
 * Requires valid JWT token in Authorization header.
 */
export const authenticationGetCurrentUserInfoOptions = (options?: Options<AuthenticationGetCurrentUserInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authenticationGetCurrentUserInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authenticationGetCurrentUserInfoQueryKey(options)
    });
};

/**
 * Logout
 * Logout endpoint (for consistency with frontend).
 *
 * Since we're using JWTs, logout is handled client-side by removing the token.
 * This endpoint exists for API completeness and future extensions
 * (like token blacklisting if needed).
 */
export const authenticationLogoutMutation = (options?: Partial<Options<AuthenticationLogoutData>>): UseMutationOptions<unknown, DefaultError, Options<AuthenticationLogoutData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<AuthenticationLogoutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await authenticationLogout({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authenticationAuthHealthQueryKey = (options?: Options<AuthenticationAuthHealthData>) => createQueryKey('authenticationAuthHealth', options);

/**
 * Auth Health
 * Health check endpoint for auth service
 */
export const authenticationAuthHealthOptions = (options?: Options<AuthenticationAuthHealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authenticationAuthHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authenticationAuthHealthQueryKey(options)
    });
};

/**
 * Upload File
 * Upload a file as an artifact to the session or user namespace.
 *
 * Args:
 * app_name: Application name
 * user_id: User identifier
 * session_id: Session identifier
 * request: FastAPI request object (for accessing app state)
 * file: Uploaded file
 * namespace: Either 'session' or 'user' (default: 'session')
 * custom_filename: Optional custom filename (default: use original filename)
 * current_user: Current authenticated user (from JWT)
 *
 * Returns:
 * Dict with upload success details including filename and version
 */
export const artifactsUploadFileMutation = (options?: Partial<Options<ArtifactsUploadFileData>>): UseMutationOptions<unknown, ArtifactsUploadFileError, Options<ArtifactsUploadFileData>> => {
    const mutationOptions: UseMutationOptions<unknown, ArtifactsUploadFileError, Options<ArtifactsUploadFileData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await artifactsUploadFile({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const artifactsGetArtifactsMetadataQueryKey = (options: Options<ArtifactsGetArtifactsMetadataData>) => createQueryKey('artifactsGetArtifactsMetadata', options);

/**
 * Get Artifacts Metadata
 * Get detailed metadata for all artifacts in a session.
 *
 * Args:
 * app_name: Application name
 * user_id: User identifier
 * session_id: Session identifier
 * request: FastAPI request object (for accessing app state)
 * current_user: Current authenticated user (from JWT)
 *
 * Returns:
 * List of artifact metadata dictionaries
 */
export const artifactsGetArtifactsMetadataOptions = (options: Options<ArtifactsGetArtifactsMetadataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await artifactsGetArtifactsMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: artifactsGetArtifactsMetadataQueryKey(options)
    });
};

export const artifactsDownloadArtifactQueryKey = (options: Options<ArtifactsDownloadArtifactData>) => createQueryKey('artifactsDownloadArtifact', options);

/**
 * Download Artifact
 * Download an artifact file with proper headers for browser download.
 *
 * Args:
 * app_name: Application name
 * user_id: User identifier
 * session_id: Session identifier
 * artifact_name: Artifact filename
 * request: FastAPI request object (for accessing app state)
 * version: Specific version (optional, defaults to latest)
 * current_user: Current authenticated user (from JWT)
 *
 * Returns:
 * StreamingResponse with file content and proper headers
 */
export const artifactsDownloadArtifactOptions = (options: Options<ArtifactsDownloadArtifactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await artifactsDownloadArtifact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: artifactsDownloadArtifactQueryKey(options)
    });
};

export const toolsGetToolOpenapiSpecQueryKey = (options: Options<ToolsGetToolOpenapiSpecData>) => createQueryKey('toolsGetToolOpenapiSpec', options);

/**
 * Get OpenAPI spec for individual tool
 * Returns the OpenAPI specification for a specific registered tool
 */
export const toolsGetToolOpenapiSpecOptions = (options: Options<ToolsGetToolOpenapiSpecData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await toolsGetToolOpenapiSpec({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: toolsGetToolOpenapiSpecQueryKey(options)
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxyMutation = (options?: Partial<Options<ToolsApiProxyData>>): UseMutationOptions<unknown, ToolsApiProxyError, Options<ToolsApiProxyData>> => {
    const mutationOptions: UseMutationOptions<unknown, ToolsApiProxyError, Options<ToolsApiProxyData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await toolsApiProxy({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const toolsApiProxy2QueryKey = (options: Options<ToolsApiProxy2Data>) => createQueryKey('toolsApiProxy2', options);

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy2Options = (options: Options<ToolsApiProxy2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await toolsApiProxy2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: toolsApiProxy2QueryKey(options)
    });
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy3Mutation = (options?: Partial<Options<ToolsApiProxy3Data>>): UseMutationOptions<unknown, ToolsApiProxy3Error, Options<ToolsApiProxy3Data>> => {
    const mutationOptions: UseMutationOptions<unknown, ToolsApiProxy3Error, Options<ToolsApiProxy3Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await toolsApiProxy3({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy4Mutation = (options?: Partial<Options<ToolsApiProxy4Data>>): UseMutationOptions<unknown, ToolsApiProxy4Error, Options<ToolsApiProxy4Data>> => {
    const mutationOptions: UseMutationOptions<unknown, ToolsApiProxy4Error, Options<ToolsApiProxy4Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await toolsApiProxy4({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Jsonplaceholder API Proxy
 * Proxy endpoint for jsonplaceholder API operations
 */
export const toolsApiProxy5Mutation = (options?: Partial<Options<ToolsApiProxy5Data>>): UseMutationOptions<unknown, ToolsApiProxy5Error, Options<ToolsApiProxy5Data>> => {
    const mutationOptions: UseMutationOptions<unknown, ToolsApiProxy5Error, Options<ToolsApiProxy5Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await toolsApiProxy5({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const toolsCustomToolQueryKey = (options: Options<ToolsCustomToolData>) => createQueryKey('toolsCustomTool', options);

/**
 * Calculator Custom Tool
 * Custom tool endpoint: calculator
 */
export const toolsCustomToolOptions = (options: Options<ToolsCustomToolData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await toolsCustomTool({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: toolsCustomToolQueryKey(options)
    });
};

/**
 * Calculator Custom Tool
 * Custom tool endpoint: calculator
 */
export const toolsCustomTool2Mutation = (options?: Partial<Options<ToolsCustomTool2Data>>): UseMutationOptions<unknown, ToolsCustomTool2Error, Options<ToolsCustomTool2Data>> => {
    const mutationOptions: UseMutationOptions<unknown, ToolsCustomTool2Error, Options<ToolsCustomTool2Data>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await toolsCustomTool2({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const toolsCustomTool3QueryKey = (options: Options<ToolsCustomTool3Data>) => createQueryKey('toolsCustomTool3', options);

/**
 * System_Info Custom Tool
 * Custom tool endpoint: system_info
 */
export const toolsCustomTool3Options = (options: Options<ToolsCustomTool3Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await toolsCustomTool3({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: toolsCustomTool3QueryKey(options)
    });
};

export const healthCheckHealthGetQueryKey = (options?: Options<HealthCheckHealthGetData>) => createQueryKey('healthCheckHealthGet', options);

/**
 * Health Check
 * Health check endpoint
 */
export const healthCheckHealthGetOptions = (options?: Options<HealthCheckHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckHealthGetQueryKey(options)
    });
};

export const getInfoInfoGetQueryKey = (options?: Options<GetInfoInfoGetData>) => createQueryKey('getInfoInfoGet', options);

/**
 * Get Info
 * Get information about the service
 */
export const getInfoInfoGetOptions = (options?: Options<GetInfoInfoGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInfoInfoGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getInfoInfoGetQueryKey(options)
    });
};